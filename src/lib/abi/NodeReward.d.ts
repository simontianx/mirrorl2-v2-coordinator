/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from 'ethers';
import {BytesLike} from '@ethersproject/bytes';
import {Listener, Provider} from '@ethersproject/providers';
import {FunctionFragment, EventFragment, Result} from '@ethersproject/abi';
import {TypedEventFilter, TypedEvent, TypedListener} from './commons';

interface NodeRewardInterface extends ethers.utils.Interface {
  functions: {
    'TIME_BUFFER()': FunctionFragment;
    'absentTimespan()': FunctionFragment;
    'accusationPenalty()': FunctionFragment;
    'accuse(address)': FunctionFragment;
    'appeal(tuple)': FunctionFragment;
    'appealTimespan()': FunctionFragment;
    'calGlobalDivident()': FunctionFragment;
    'checkinTimespan()': FunctionFragment;
    'claim(tuple)': FunctionFragment;
    'endTimestamp()': FunctionFragment;
    'globalDivident()': FunctionFragment;
    'nodeAccusations(address)': FunctionFragment;
    'nodePenalties(address)': FunctionFragment;
    'lastTimestamp()': FunctionFragment;
    'maxNodeStake()': FunctionFragment;
    'owner()': FunctionFragment;
    'rate()': FunctionFragment;
    'renounceOwnership()': FunctionFragment;
    'rewardToken()': FunctionFragment;
    'setPenalty(uint256)': FunctionFragment;
    'setTimespan(uint256,uint256,uint256)': FunctionFragment;
    'setValidator(address)': FunctionFragment;
    'stake(uint256,tuple)': FunctionFragment;
    'stakeToken()': FunctionFragment;
    'stakes(address)': FunctionFragment;
    'startTimestamp()': FunctionFragment;
    'totalStakes()': FunctionFragment;
    'transferOwnership(address)': FunctionFragment;
    'unstake(uint256,tuple)': FunctionFragment;
    'updateEndTimestamp(uint256)': FunctionFragment;
    'updateRate(uint256)': FunctionFragment;
    'userDivident(address)': FunctionFragment;
    'validator()': FunctionFragment;
    'winAccusation(address)': FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: 'TIME_BUFFER',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'absentTimespan',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'accusationPenalty',
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: 'accuse', values: [string]): string;
  encodeFunctionData(
    functionFragment: 'appeal',
    values: [
      {
        timestamp: BigNumberish;
        r: BytesLike;
        s: BytesLike;
        node: string;
        v: BigNumberish;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: 'appealTimespan',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'calGlobalDivident',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'checkinTimespan',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'claim',
    values: [
      {
        timestamp: BigNumberish;
        r: BytesLike;
        s: BytesLike;
        node: string;
        v: BigNumberish;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: 'endTimestamp',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'globalDivident',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'nodeAccusations',
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: 'nodePenalties',
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: 'lastTimestamp',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'maxNodeStake',
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(functionFragment: 'rate', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'renounceOwnership',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'rewardToken',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'setPenalty',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'setTimespan',
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'setValidator',
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: 'stake',
    values: [
      BigNumberish,
      {
        timestamp: BigNumberish;
        r: BytesLike;
        s: BytesLike;
        node: string;
        v: BigNumberish;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: 'stakeToken',
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: 'stakes', values: [string]): string;
  encodeFunctionData(
    functionFragment: 'startTimestamp',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'totalStakes',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'transferOwnership',
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: 'unstake',
    values: [
      BigNumberish,
      {
        timestamp: BigNumberish;
        r: BytesLike;
        s: BytesLike;
        node: string;
        v: BigNumberish;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: 'updateEndTimestamp',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'updateRate',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'userDivident',
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: 'validator', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'winAccusation',
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: 'TIME_BUFFER',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'absentTimespan',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'accusationPenalty',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'accuse', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'appeal', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'appealTimespan',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'calGlobalDivident',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'checkinTimespan',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'claim', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'endTimestamp',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'globalDivident',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'nodeAccusations',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'nodePenalties',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'lastTimestamp',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'maxNodeStake',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'rate', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'renounceOwnership',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'rewardToken',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'setPenalty', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'setTimespan',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setValidator',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'stake', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'stakeToken', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'stakes', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'startTimestamp',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'totalStakes',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'transferOwnership',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'unstake', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'updateEndTimestamp',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'updateRate', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'userDivident',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'validator', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'winAccusation',
    data: BytesLike
  ): Result;

  events: {
    'Accuse(address,address,uint256,uint256)': EventFragment;
    'AccuseLose(address,address,address,uint256)': EventFragment;
    'AccuseWin(address,address,uint256)': EventFragment;
    'Claim(address,uint256,uint256)': EventFragment;
    'OwnershipTransferred(address,address)': EventFragment;
    'PenaltyPaid(address,uint256)': EventFragment;
    'SetPenalty(uint256)': EventFragment;
    'SetTimespan(uint256,uint256,uint256)': EventFragment;
    'SetValidator(address)': EventFragment;
    'Stake(address,uint256,uint256,uint256)': EventFragment;
    'Unstake(address,uint256,uint256,uint256)': EventFragment;
    'UpdateEndTimestamp(uint256)': EventFragment;
    'UpdateRate(uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'Accuse'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'AccuseLose'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'AccuseWin'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Claim'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'PenaltyPaid'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SetPenalty'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SetTimespan'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SetValidator'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Stake'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Unstake'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'UpdateEndTimestamp'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'UpdateRate'): EventFragment;
}

export class NodeReward extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: NodeRewardInterface;

  functions: {
    TIME_BUFFER(overrides?: CallOverrides): Promise<[BigNumber]>;

    'TIME_BUFFER()'(overrides?: CallOverrides): Promise<[BigNumber]>;

    absentTimespan(overrides?: CallOverrides): Promise<[BigNumber]>;

    'absentTimespan()'(overrides?: CallOverrides): Promise<[BigNumber]>;

    accusationPenalty(overrides?: CallOverrides): Promise<[BigNumber]>;

    'accusationPenalty()'(overrides?: CallOverrides): Promise<[BigNumber]>;

    accuse(
      node: string,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;

    'accuse(address)'(
      node: string,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;

    appeal(
      proof: {
        timestamp: BigNumberish;
        r: BytesLike;
        s: BytesLike;
        node: string;
        v: BigNumberish;
      },
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;

    'appeal((uint256,bytes32,bytes32,address,uint8))'(
      proof: {
        timestamp: BigNumberish;
        r: BytesLike;
        s: BytesLike;
        node: string;
        v: BigNumberish;
      },
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;

    appealTimespan(overrides?: CallOverrides): Promise<[BigNumber]>;

    'appealTimespan()'(overrides?: CallOverrides): Promise<[BigNumber]>;

    calGlobalDivident(overrides?: CallOverrides): Promise<[BigNumber]>;

    'calGlobalDivident()'(overrides?: CallOverrides): Promise<[BigNumber]>;

    checkinTimespan(overrides?: CallOverrides): Promise<[BigNumber]>;

    'checkinTimespan()'(overrides?: CallOverrides): Promise<[BigNumber]>;

    claim(
      proof: {
        timestamp: BigNumberish;
        r: BytesLike;
        s: BytesLike;
        node: string;
        v: BigNumberish;
      },
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;

    'claim((uint256,bytes32,bytes32,address,uint8))'(
      proof: {
        timestamp: BigNumberish;
        r: BytesLike;
        s: BytesLike;
        node: string;
        v: BigNumberish;
      },
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;

    endTimestamp(overrides?: CallOverrides): Promise<[BigNumber]>;

    'endTimestamp()'(overrides?: CallOverrides): Promise<[BigNumber]>;

    globalDivident(overrides?: CallOverrides): Promise<[BigNumber]>;

    'globalDivident()'(overrides?: CallOverrides): Promise<[BigNumber]>;

    nodeAccusations(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber] & {
        accuser: string;
        collateral: BigNumber;
        timestamp: BigNumber;
      }
    >;

    'nodeAccusations(address)'(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber] & {
        accuser: string;
        collateral: BigNumber;
        timestamp: BigNumber;
      }
    >;

    nodePenalties(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    'nodePenalties(address)'(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    lastTimestamp(overrides?: CallOverrides): Promise<[BigNumber]>;

    'lastTimestamp()'(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxNodeStake(overrides?: CallOverrides): Promise<[BigNumber]>;

    'maxNodeStake()'(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    'owner()'(overrides?: CallOverrides): Promise<[string]>;

    rate(overrides?: CallOverrides): Promise<[BigNumber]>;

    'rate()'(overrides?: CallOverrides): Promise<[BigNumber]>;

    renounceOwnership(
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;

    'renounceOwnership()'(
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;

    rewardToken(overrides?: CallOverrides): Promise<[string]>;

    'rewardToken()'(overrides?: CallOverrides): Promise<[string]>;

    setPenalty(
      _penalty: BigNumberish,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;

    'setPenalty(uint256)'(
      _penalty: BigNumberish,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;

    setTimespan(
      _checkinTimespan: BigNumberish,
      _absentTimespan: BigNumberish,
      _appealTimespan: BigNumberish,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;

    'setTimespan(uint256,uint256,uint256)'(
      _checkinTimespan: BigNumberish,
      _absentTimespan: BigNumberish,
      _appealTimespan: BigNumberish,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;

    setValidator(
      _validator: string,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;

    'setValidator(address)'(
      _validator: string,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;

    stake(
      amount: BigNumberish,
      proof: {
        timestamp: BigNumberish;
        r: BytesLike;
        s: BytesLike;
        node: string;
        v: BigNumberish;
      },
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;

    'stake(uint256,(uint256,bytes32,bytes32,address,uint8))'(
      amount: BigNumberish,
      proof: {
        timestamp: BigNumberish;
        r: BytesLike;
        s: BytesLike;
        node: string;
        v: BigNumberish;
      },
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;

    stakeToken(overrides?: CallOverrides): Promise<[string]>;

    'stakeToken()'(overrides?: CallOverrides): Promise<[string]>;

    stakes(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    'stakes(address)'(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    startTimestamp(overrides?: CallOverrides): Promise<[BigNumber]>;

    'startTimestamp()'(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalStakes(overrides?: CallOverrides): Promise<[BigNumber]>;

    'totalStakes()'(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;

    'transferOwnership(address)'(
      newOwner: string,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;

    unstake(
      amount: BigNumberish,
      proof: {
        timestamp: BigNumberish;
        r: BytesLike;
        s: BytesLike;
        node: string;
        v: BigNumberish;
      },
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;

    'unstake(uint256,(uint256,bytes32,bytes32,address,uint8))'(
      amount: BigNumberish,
      proof: {
        timestamp: BigNumberish;
        r: BytesLike;
        s: BytesLike;
        node: string;
        v: BigNumberish;
      },
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;

    updateEndTimestamp(
      _endTimestamp: BigNumberish,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;

    'updateEndTimestamp(uint256)'(
      _endTimestamp: BigNumberish,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;

    updateRate(
      _rate: BigNumberish,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;

    'updateRate(uint256)'(
      _rate: BigNumberish,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;

    userDivident(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    'userDivident(address)'(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    validator(overrides?: CallOverrides): Promise<[string]>;

    'validator()'(overrides?: CallOverrides): Promise<[string]>;

    winAccusation(
      node: string,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;

    'winAccusation(address)'(
      node: string,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;
  };

  TIME_BUFFER(overrides?: CallOverrides): Promise<BigNumber>;

  'TIME_BUFFER()'(overrides?: CallOverrides): Promise<BigNumber>;

  absentTimespan(overrides?: CallOverrides): Promise<BigNumber>;

  'absentTimespan()'(overrides?: CallOverrides): Promise<BigNumber>;

  accusationPenalty(overrides?: CallOverrides): Promise<BigNumber>;

  'accusationPenalty()'(overrides?: CallOverrides): Promise<BigNumber>;

  accuse(
    node: string,
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  'accuse(address)'(
    node: string,
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  appeal(
    proof: {
      timestamp: BigNumberish;
      r: BytesLike;
      s: BytesLike;
      node: string;
      v: BigNumberish;
    },
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  'appeal((uint256,bytes32,bytes32,address,uint8))'(
    proof: {
      timestamp: BigNumberish;
      r: BytesLike;
      s: BytesLike;
      node: string;
      v: BigNumberish;
    },
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  appealTimespan(overrides?: CallOverrides): Promise<BigNumber>;

  'appealTimespan()'(overrides?: CallOverrides): Promise<BigNumber>;

  calGlobalDivident(overrides?: CallOverrides): Promise<BigNumber>;

  'calGlobalDivident()'(overrides?: CallOverrides): Promise<BigNumber>;

  checkinTimespan(overrides?: CallOverrides): Promise<BigNumber>;

  'checkinTimespan()'(overrides?: CallOverrides): Promise<BigNumber>;

  claim(
    proof: {
      timestamp: BigNumberish;
      r: BytesLike;
      s: BytesLike;
      node: string;
      v: BigNumberish;
    },
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  'claim((uint256,bytes32,bytes32,address,uint8))'(
    proof: {
      timestamp: BigNumberish;
      r: BytesLike;
      s: BytesLike;
      node: string;
      v: BigNumberish;
    },
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  endTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

  'endTimestamp()'(overrides?: CallOverrides): Promise<BigNumber>;

  globalDivident(overrides?: CallOverrides): Promise<BigNumber>;

  'globalDivident()'(overrides?: CallOverrides): Promise<BigNumber>;

  nodeAccusations(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber] & {
      accuser: string;
      collateral: BigNumber;
      timestamp: BigNumber;
    }
  >;

  'nodeAccusations(address)'(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber] & {
      accuser: string;
      collateral: BigNumber;
      timestamp: BigNumber;
    }
  >;

  nodePenalties(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  'nodePenalties(address)'(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  lastTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

  'lastTimestamp()'(overrides?: CallOverrides): Promise<BigNumber>;

  maxNodeStake(overrides?: CallOverrides): Promise<BigNumber>;

  'maxNodeStake()'(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  'owner()'(overrides?: CallOverrides): Promise<string>;

  rate(overrides?: CallOverrides): Promise<BigNumber>;

  'rate()'(overrides?: CallOverrides): Promise<BigNumber>;

  renounceOwnership(
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  'renounceOwnership()'(
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  rewardToken(overrides?: CallOverrides): Promise<string>;

  'rewardToken()'(overrides?: CallOverrides): Promise<string>;

  setPenalty(
    _penalty: BigNumberish,
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  'setPenalty(uint256)'(
    _penalty: BigNumberish,
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  setTimespan(
    _checkinTimespan: BigNumberish,
    _absentTimespan: BigNumberish,
    _appealTimespan: BigNumberish,
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  'setTimespan(uint256,uint256,uint256)'(
    _checkinTimespan: BigNumberish,
    _absentTimespan: BigNumberish,
    _appealTimespan: BigNumberish,
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  setValidator(
    _validator: string,
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  'setValidator(address)'(
    _validator: string,
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  stake(
    amount: BigNumberish,
    proof: {
      timestamp: BigNumberish;
      r: BytesLike;
      s: BytesLike;
      node: string;
      v: BigNumberish;
    },
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  'stake(uint256,(uint256,bytes32,bytes32,address,uint8))'(
    amount: BigNumberish,
    proof: {
      timestamp: BigNumberish;
      r: BytesLike;
      s: BytesLike;
      node: string;
      v: BigNumberish;
    },
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  stakeToken(overrides?: CallOverrides): Promise<string>;

  'stakeToken()'(overrides?: CallOverrides): Promise<string>;

  stakes(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  'stakes(address)'(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  startTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

  'startTimestamp()'(overrides?: CallOverrides): Promise<BigNumber>;

  totalStakes(overrides?: CallOverrides): Promise<BigNumber>;

  'totalStakes()'(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  'transferOwnership(address)'(
    newOwner: string,
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  unstake(
    amount: BigNumberish,
    proof: {
      timestamp: BigNumberish;
      r: BytesLike;
      s: BytesLike;
      node: string;
      v: BigNumberish;
    },
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  'unstake(uint256,(uint256,bytes32,bytes32,address,uint8))'(
    amount: BigNumberish,
    proof: {
      timestamp: BigNumberish;
      r: BytesLike;
      s: BytesLike;
      node: string;
      v: BigNumberish;
    },
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  updateEndTimestamp(
    _endTimestamp: BigNumberish,
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  'updateEndTimestamp(uint256)'(
    _endTimestamp: BigNumberish,
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  updateRate(
    _rate: BigNumberish,
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  'updateRate(uint256)'(
    _rate: BigNumberish,
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  userDivident(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  'userDivident(address)'(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  validator(overrides?: CallOverrides): Promise<string>;

  'validator()'(overrides?: CallOverrides): Promise<string>;

  winAccusation(
    node: string,
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  'winAccusation(address)'(
    node: string,
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  callStatic: {
    TIME_BUFFER(overrides?: CallOverrides): Promise<BigNumber>;

    'TIME_BUFFER()'(overrides?: CallOverrides): Promise<BigNumber>;

    absentTimespan(overrides?: CallOverrides): Promise<BigNumber>;

    'absentTimespan()'(overrides?: CallOverrides): Promise<BigNumber>;

    accusationPenalty(overrides?: CallOverrides): Promise<BigNumber>;

    'accusationPenalty()'(overrides?: CallOverrides): Promise<BigNumber>;

    accuse(node: string, overrides?: CallOverrides): Promise<void>;

    'accuse(address)'(node: string, overrides?: CallOverrides): Promise<void>;

    appeal(
      proof: {
        timestamp: BigNumberish;
        r: BytesLike;
        s: BytesLike;
        node: string;
        v: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    'appeal((uint256,bytes32,bytes32,address,uint8))'(
      proof: {
        timestamp: BigNumberish;
        r: BytesLike;
        s: BytesLike;
        node: string;
        v: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    appealTimespan(overrides?: CallOverrides): Promise<BigNumber>;

    'appealTimespan()'(overrides?: CallOverrides): Promise<BigNumber>;

    calGlobalDivident(overrides?: CallOverrides): Promise<BigNumber>;

    'calGlobalDivident()'(overrides?: CallOverrides): Promise<BigNumber>;

    checkinTimespan(overrides?: CallOverrides): Promise<BigNumber>;

    'checkinTimespan()'(overrides?: CallOverrides): Promise<BigNumber>;

    claim(
      proof: {
        timestamp: BigNumberish;
        r: BytesLike;
        s: BytesLike;
        node: string;
        v: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    'claim((uint256,bytes32,bytes32,address,uint8))'(
      proof: {
        timestamp: BigNumberish;
        r: BytesLike;
        s: BytesLike;
        node: string;
        v: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    endTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    'endTimestamp()'(overrides?: CallOverrides): Promise<BigNumber>;

    globalDivident(overrides?: CallOverrides): Promise<BigNumber>;

    'globalDivident()'(overrides?: CallOverrides): Promise<BigNumber>;

    nodeAccusations(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber] & {
        accuser: string;
        collateral: BigNumber;
        timestamp: BigNumber;
      }
    >;

    'nodeAccusations(address)'(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber] & {
        accuser: string;
        collateral: BigNumber;
        timestamp: BigNumber;
      }
    >;

    nodePenalties(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    'nodePenalties(address)'(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lastTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    'lastTimestamp()'(overrides?: CallOverrides): Promise<BigNumber>;

    maxNodeStake(overrides?: CallOverrides): Promise<BigNumber>;

    'maxNodeStake()'(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    'owner()'(overrides?: CallOverrides): Promise<string>;

    rate(overrides?: CallOverrides): Promise<BigNumber>;

    'rate()'(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    'renounceOwnership()'(overrides?: CallOverrides): Promise<void>;

    rewardToken(overrides?: CallOverrides): Promise<string>;

    'rewardToken()'(overrides?: CallOverrides): Promise<string>;

    setPenalty(
      _penalty: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    'setPenalty(uint256)'(
      _penalty: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setTimespan(
      _checkinTimespan: BigNumberish,
      _absentTimespan: BigNumberish,
      _appealTimespan: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    'setTimespan(uint256,uint256,uint256)'(
      _checkinTimespan: BigNumberish,
      _absentTimespan: BigNumberish,
      _appealTimespan: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setValidator(_validator: string, overrides?: CallOverrides): Promise<void>;

    'setValidator(address)'(
      _validator: string,
      overrides?: CallOverrides
    ): Promise<void>;

    stake(
      amount: BigNumberish,
      proof: {
        timestamp: BigNumberish;
        r: BytesLike;
        s: BytesLike;
        node: string;
        v: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    'stake(uint256,(uint256,bytes32,bytes32,address,uint8))'(
      amount: BigNumberish,
      proof: {
        timestamp: BigNumberish;
        r: BytesLike;
        s: BytesLike;
        node: string;
        v: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stakeToken(overrides?: CallOverrides): Promise<string>;

    'stakeToken()'(overrides?: CallOverrides): Promise<string>;

    stakes(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    'stakes(address)'(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    startTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    'startTimestamp()'(overrides?: CallOverrides): Promise<BigNumber>;

    totalStakes(overrides?: CallOverrides): Promise<BigNumber>;

    'totalStakes()'(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    'transferOwnership(address)'(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unstake(
      amount: BigNumberish,
      proof: {
        timestamp: BigNumberish;
        r: BytesLike;
        s: BytesLike;
        node: string;
        v: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    'unstake(uint256,(uint256,bytes32,bytes32,address,uint8))'(
      amount: BigNumberish,
      proof: {
        timestamp: BigNumberish;
        r: BytesLike;
        s: BytesLike;
        node: string;
        v: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    updateEndTimestamp(
      _endTimestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    'updateEndTimestamp(uint256)'(
      _endTimestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateRate(_rate: BigNumberish, overrides?: CallOverrides): Promise<void>;

    'updateRate(uint256)'(
      _rate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    userDivident(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    'userDivident(address)'(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    validator(overrides?: CallOverrides): Promise<string>;

    'validator()'(overrides?: CallOverrides): Promise<string>;

    winAccusation(node: string, overrides?: CallOverrides): Promise<void>;

    'winAccusation(address)'(
      node: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    Accuse(
      node: string | null,
      accuser: null,
      collateral: null,
      timestamp: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber],
      {
        node: string;
        accuser: string;
        collateral: BigNumber;
        timestamp: BigNumber;
      }
    >;

    AccuseLose(
      node: string | null,
      accuser: null,
      witness: null,
      penalty: null
    ): TypedEventFilter<
      [string, string, string, BigNumber],
      {node: string; accuser: string; witness: string; penalty: BigNumber}
    >;

    AccuseWin(
      node: string | null,
      accuser: null,
      penalty: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      {node: string; accuser: string; penalty: BigNumber}
    >;

    Claim(
      user: string | null,
      rewards: null,
      globalDivident: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      {user: string; rewards: BigNumber; globalDivident: BigNumber}
    >;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): TypedEventFilter<
      [string, string],
      {previousOwner: string; newOwner: string}
    >;

    PenaltyPaid(
      node: string | null,
      amount: null
    ): TypedEventFilter<
      [string, BigNumber],
      {node: string; amount: BigNumber}
    >;

    SetPenalty(
      amount: null
    ): TypedEventFilter<[BigNumber], {amount: BigNumber}>;

    SetTimespan(
      checkin: null,
      absent: null,
      appeal: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber],
      {checkin: BigNumber; absent: BigNumber; appeal: BigNumber}
    >;

    SetValidator(
      validator: null
    ): TypedEventFilter<[string], {validator: string}>;

    Stake(
      user: string | null,
      amount: null,
      rewards: null,
      globalDivident: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber],
      {
        user: string;
        amount: BigNumber;
        rewards: BigNumber;
        globalDivident: BigNumber;
      }
    >;

    Unstake(
      user: string | null,
      amount: null,
      rewards: null,
      globalDivident: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber],
      {
        user: string;
        amount: BigNumber;
        rewards: BigNumber;
        globalDivident: BigNumber;
      }
    >;

    UpdateEndTimestamp(
      endTimestamp: null
    ): TypedEventFilter<[BigNumber], {endTimestamp: BigNumber}>;

    UpdateRate(rate: null): TypedEventFilter<[BigNumber], {rate: BigNumber}>;
  };

  estimateGas: {
    TIME_BUFFER(overrides?: CallOverrides): Promise<BigNumber>;

    'TIME_BUFFER()'(overrides?: CallOverrides): Promise<BigNumber>;

    absentTimespan(overrides?: CallOverrides): Promise<BigNumber>;

    'absentTimespan()'(overrides?: CallOverrides): Promise<BigNumber>;

    accusationPenalty(overrides?: CallOverrides): Promise<BigNumber>;

    'accusationPenalty()'(overrides?: CallOverrides): Promise<BigNumber>;

    accuse(
      node: string,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;

    'accuse(address)'(
      node: string,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;

    appeal(
      proof: {
        timestamp: BigNumberish;
        r: BytesLike;
        s: BytesLike;
        node: string;
        v: BigNumberish;
      },
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;

    'appeal((uint256,bytes32,bytes32,address,uint8))'(
      proof: {
        timestamp: BigNumberish;
        r: BytesLike;
        s: BytesLike;
        node: string;
        v: BigNumberish;
      },
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;

    appealTimespan(overrides?: CallOverrides): Promise<BigNumber>;

    'appealTimespan()'(overrides?: CallOverrides): Promise<BigNumber>;

    calGlobalDivident(overrides?: CallOverrides): Promise<BigNumber>;

    'calGlobalDivident()'(overrides?: CallOverrides): Promise<BigNumber>;

    checkinTimespan(overrides?: CallOverrides): Promise<BigNumber>;

    'checkinTimespan()'(overrides?: CallOverrides): Promise<BigNumber>;

    claim(
      proof: {
        timestamp: BigNumberish;
        r: BytesLike;
        s: BytesLike;
        node: string;
        v: BigNumberish;
      },
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;

    'claim((uint256,bytes32,bytes32,address,uint8))'(
      proof: {
        timestamp: BigNumberish;
        r: BytesLike;
        s: BytesLike;
        node: string;
        v: BigNumberish;
      },
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;

    endTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    'endTimestamp()'(overrides?: CallOverrides): Promise<BigNumber>;

    globalDivident(overrides?: CallOverrides): Promise<BigNumber>;

    'globalDivident()'(overrides?: CallOverrides): Promise<BigNumber>;

    nodeAccusations(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    'nodeAccusations(address)'(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nodePenalties(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    'nodePenalties(address)'(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lastTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    'lastTimestamp()'(overrides?: CallOverrides): Promise<BigNumber>;

    maxNodeStake(overrides?: CallOverrides): Promise<BigNumber>;

    'maxNodeStake()'(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    'owner()'(overrides?: CallOverrides): Promise<BigNumber>;

    rate(overrides?: CallOverrides): Promise<BigNumber>;

    'rate()'(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;

    'renounceOwnership()'(
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;

    rewardToken(overrides?: CallOverrides): Promise<BigNumber>;

    'rewardToken()'(overrides?: CallOverrides): Promise<BigNumber>;

    setPenalty(
      _penalty: BigNumberish,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;

    'setPenalty(uint256)'(
      _penalty: BigNumberish,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;

    setTimespan(
      _checkinTimespan: BigNumberish,
      _absentTimespan: BigNumberish,
      _appealTimespan: BigNumberish,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;

    'setTimespan(uint256,uint256,uint256)'(
      _checkinTimespan: BigNumberish,
      _absentTimespan: BigNumberish,
      _appealTimespan: BigNumberish,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;

    setValidator(
      _validator: string,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;

    'setValidator(address)'(
      _validator: string,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;

    stake(
      amount: BigNumberish,
      proof: {
        timestamp: BigNumberish;
        r: BytesLike;
        s: BytesLike;
        node: string;
        v: BigNumberish;
      },
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;

    'stake(uint256,(uint256,bytes32,bytes32,address,uint8))'(
      amount: BigNumberish,
      proof: {
        timestamp: BigNumberish;
        r: BytesLike;
        s: BytesLike;
        node: string;
        v: BigNumberish;
      },
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;

    stakeToken(overrides?: CallOverrides): Promise<BigNumber>;

    'stakeToken()'(overrides?: CallOverrides): Promise<BigNumber>;

    stakes(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    'stakes(address)'(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    startTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    'startTimestamp()'(overrides?: CallOverrides): Promise<BigNumber>;

    totalStakes(overrides?: CallOverrides): Promise<BigNumber>;

    'totalStakes()'(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;

    'transferOwnership(address)'(
      newOwner: string,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;

    unstake(
      amount: BigNumberish,
      proof: {
        timestamp: BigNumberish;
        r: BytesLike;
        s: BytesLike;
        node: string;
        v: BigNumberish;
      },
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;

    'unstake(uint256,(uint256,bytes32,bytes32,address,uint8))'(
      amount: BigNumberish,
      proof: {
        timestamp: BigNumberish;
        r: BytesLike;
        s: BytesLike;
        node: string;
        v: BigNumberish;
      },
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;

    updateEndTimestamp(
      _endTimestamp: BigNumberish,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;

    'updateEndTimestamp(uint256)'(
      _endTimestamp: BigNumberish,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;

    updateRate(
      _rate: BigNumberish,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;

    'updateRate(uint256)'(
      _rate: BigNumberish,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;

    userDivident(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    'userDivident(address)'(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    validator(overrides?: CallOverrides): Promise<BigNumber>;

    'validator()'(overrides?: CallOverrides): Promise<BigNumber>;

    winAccusation(
      node: string,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;

    'winAccusation(address)'(
      node: string,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    TIME_BUFFER(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'TIME_BUFFER()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    absentTimespan(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'absentTimespan()'(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    accusationPenalty(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'accusationPenalty()'(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    accuse(
      node: string,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;

    'accuse(address)'(
      node: string,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;

    appeal(
      proof: {
        timestamp: BigNumberish;
        r: BytesLike;
        s: BytesLike;
        node: string;
        v: BigNumberish;
      },
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;

    'appeal((uint256,bytes32,bytes32,address,uint8))'(
      proof: {
        timestamp: BigNumberish;
        r: BytesLike;
        s: BytesLike;
        node: string;
        v: BigNumberish;
      },
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;

    appealTimespan(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'appealTimespan()'(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calGlobalDivident(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'calGlobalDivident()'(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    checkinTimespan(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'checkinTimespan()'(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claim(
      proof: {
        timestamp: BigNumberish;
        r: BytesLike;
        s: BytesLike;
        node: string;
        v: BigNumberish;
      },
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;

    'claim((uint256,bytes32,bytes32,address,uint8))'(
      proof: {
        timestamp: BigNumberish;
        r: BytesLike;
        s: BytesLike;
        node: string;
        v: BigNumberish;
      },
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;

    endTimestamp(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'endTimestamp()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    globalDivident(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'globalDivident()'(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nodeAccusations(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    'nodeAccusations(address)'(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nodePenalties(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    'nodePenalties(address)'(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastTimestamp(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'lastTimestamp()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxNodeStake(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'maxNodeStake()'(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'owner()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'rate()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;

    'renounceOwnership()'(
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;

    rewardToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'rewardToken()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setPenalty(
      _penalty: BigNumberish,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;

    'setPenalty(uint256)'(
      _penalty: BigNumberish,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;

    setTimespan(
      _checkinTimespan: BigNumberish,
      _absentTimespan: BigNumberish,
      _appealTimespan: BigNumberish,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;

    'setTimespan(uint256,uint256,uint256)'(
      _checkinTimespan: BigNumberish,
      _absentTimespan: BigNumberish,
      _appealTimespan: BigNumberish,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;

    setValidator(
      _validator: string,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;

    'setValidator(address)'(
      _validator: string,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;

    stake(
      amount: BigNumberish,
      proof: {
        timestamp: BigNumberish;
        r: BytesLike;
        s: BytesLike;
        node: string;
        v: BigNumberish;
      },
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;

    'stake(uint256,(uint256,bytes32,bytes32,address,uint8))'(
      amount: BigNumberish,
      proof: {
        timestamp: BigNumberish;
        r: BytesLike;
        s: BytesLike;
        node: string;
        v: BigNumberish;
      },
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;

    stakeToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'stakeToken()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stakes(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    'stakes(address)'(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    startTimestamp(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'startTimestamp()'(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalStakes(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'totalStakes()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;

    'transferOwnership(address)'(
      newOwner: string,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;

    unstake(
      amount: BigNumberish,
      proof: {
        timestamp: BigNumberish;
        r: BytesLike;
        s: BytesLike;
        node: string;
        v: BigNumberish;
      },
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;

    'unstake(uint256,(uint256,bytes32,bytes32,address,uint8))'(
      amount: BigNumberish,
      proof: {
        timestamp: BigNumberish;
        r: BytesLike;
        s: BytesLike;
        node: string;
        v: BigNumberish;
      },
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;

    updateEndTimestamp(
      _endTimestamp: BigNumberish,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;

    'updateEndTimestamp(uint256)'(
      _endTimestamp: BigNumberish,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;

    updateRate(
      _rate: BigNumberish,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;

    'updateRate(uint256)'(
      _rate: BigNumberish,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;

    userDivident(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    'userDivident(address)'(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    validator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'validator()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    winAccusation(
      node: string,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;

    'winAccusation(address)'(
      node: string,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;
  };
}
