/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from 'ethers';
import {BytesLike} from '@ethersproject/bytes';
import {Listener, Provider} from '@ethersproject/providers';
import {FunctionFragment, EventFragment, Result} from '@ethersproject/abi';
import {TypedEventFilter, TypedEvent, TypedListener} from './commons';

interface MirrorSystemInterface extends ethers.utils.Interface {
  functions: {
    'DEFAULT_ADMIN_ROLE()': FunctionFragment;
    'GROUP_REUSING_GAP()': FunctionFragment;
    'GROUP_ROLE()': FunctionFragment;
    'GUARD_ROLE()': FunctionFragment;
    'NODE_COOLDOWN()': FunctionFragment;
    'MINT_REQUEST_GRACE_PERIOD()': FunctionFragment;
    'REFUND_GAP()': FunctionFragment;
    'WITHDRAW_VERIFICATION_END()': FunctionFragment;
    'addGroup(string,uint32,uint32,address[])': FunctionFragment;
    'allowNodeExit()': FunctionFragment;
    'chill(address,uint32)': FunctionFragment;
    'cooldownUntil(address)': FunctionFragment;
    'deleteGroup(string)': FunctionFragment;
    'deleteGroups(string[])': FunctionFragment;
    'fee()': FunctionFragment;
    'forceRequestMint(string,uint32,uint32)': FunctionFragment;
    'getGroup(string)': FunctionFragment;
    'getReceipt(bytes32)': FunctionFragment;
    'getReceiptId(string,uint256)': FunctionFragment;
    'getRefundData()': FunctionFragment;
    'getRoleAdmin(bytes32)': FunctionFragment;
    'getRoleMember(bytes32,uint256)': FunctionFragment;
    'getRoleMemberCount(bytes32)': FunctionFragment;
    'grantRole(bytes32,address)': FunctionFragment;
    'hasRole(bytes32,address)': FunctionFragment;
    'initialize(address,address,address,address)': FunctionFragment;
    'nodeExitAllowed()': FunctionFragment;
    'nodeExiting(address)': FunctionFragment;
    'nodeRegistry()': FunctionFragment;
    'pause()': FunctionFragment;
    'paused()': FunctionFragment;
    'recoverBurn(bytes32)': FunctionFragment;
    'refundBtc(string,bytes32)': FunctionFragment;
    'renounceRole(bytes32,address)': FunctionFragment;
    'requestBurn(bytes32,string)': FunctionFragment;
    'requestMint(string,uint32,uint32)': FunctionFragment;
    'revokeMint(bytes32)': FunctionFragment;
    'revokeRole(bytes32,address)': FunctionFragment;
    'rewarder()': FunctionFragment;
    'sats()': FunctionFragment;
    'toggleExitNode()': FunctionFragment;
    'unpause()': FunctionFragment;
    'verifyBurn(bytes32)': FunctionFragment;
    'verifyMint(tuple,address[],bytes32[],bytes32[],uint256)': FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: 'DEFAULT_ADMIN_ROLE',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'GROUP_REUSING_GAP',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'GROUP_ROLE',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'GUARD_ROLE',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'NODE_COOLDOWN',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'MINT_REQUEST_GRACE_PERIOD',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'REFUND_GAP',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'WITHDRAW_VERIFICATION_END',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'addGroup',
    values: [string, BigNumberish, BigNumberish, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: 'allowNodeExit',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'chill',
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'cooldownUntil',
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: 'deleteGroup', values: [string]): string;
  encodeFunctionData(
    functionFragment: 'deleteGroups',
    values: [string[]]
  ): string;
  encodeFunctionData(functionFragment: 'fee', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'forceRequestMint',
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: 'getGroup', values: [string]): string;
  encodeFunctionData(
    functionFragment: 'getReceipt',
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: 'getReceiptId',
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'getRefundData',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'getRoleAdmin',
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: 'getRoleMember',
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'getRoleMemberCount',
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: 'grantRole',
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: 'hasRole',
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: 'initialize',
    values: [string, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: 'nodeExitAllowed',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'nodeExiting',
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: 'nodeRegistry',
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: 'pause', values?: undefined): string;
  encodeFunctionData(functionFragment: 'paused', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'recoverBurn',
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: 'refundBtc',
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: 'renounceRole',
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: 'requestBurn',
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: 'requestMint',
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'revokeMint',
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: 'revokeRole',
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(functionFragment: 'rewarder', values?: undefined): string;
  encodeFunctionData(functionFragment: 'sats', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'toggleExitNode',
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: 'unpause', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'verifyBurn',
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: 'verifyMint',
    values: [
      {receiptId: BytesLike; txId: BytesLike; height: BigNumberish},
      string[],
      BytesLike[],
      BytesLike[],
      BigNumberish
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: 'DEFAULT_ADMIN_ROLE',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'GROUP_REUSING_GAP',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'GROUP_ROLE', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'GUARD_ROLE', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'NODE_COOLDOWN',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'MINT_REQUEST_GRACE_PERIOD',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'REFUND_GAP', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'WITHDRAW_VERIFICATION_END',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'addGroup', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'allowNodeExit',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'chill', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'cooldownUntil',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'deleteGroup',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'deleteGroups',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'fee', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'forceRequestMint',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'getGroup', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getReceipt', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'getReceiptId',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getRefundData',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getRoleAdmin',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getRoleMember',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getRoleMemberCount',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'grantRole', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'hasRole', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'nodeExitAllowed',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'nodeExiting',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'nodeRegistry',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'pause', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'paused', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'recoverBurn',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'refundBtc', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'renounceRole',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'requestBurn',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'requestMint',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'revokeMint', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'revokeRole', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'rewarder', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'sats', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'toggleExitNode',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'unpause', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'verifyBurn', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'verifyMint', data: BytesLike): Result;

  events: {
    'AllowNodeExit(address)': EventFragment;
    'BtcRefunded(string,bytes32,uint32)': EventFragment;
    'BurnRequested(bytes32,string,string,address)': EventFragment;
    'BurnRevoked(bytes32,string,address,address)': EventFragment;
    'BurnVerified(bytes32,string,address)': EventFragment;
    'Cooldown(address,uint32)': EventFragment;
    'GroupAdded(string,uint32,uint32,address[])': EventFragment;
    'GroupDeleted(string)': EventFragment;
    'MintRequested(bytes32,address,uint32,string)': EventFragment;
    'MintRevoked(bytes32,string,address)': EventFragment;
    'MintVerified(bytes32,string,address[],bytes32,uint32)': EventFragment;
    'Paused(address)': EventFragment;
    'RoleAdminChanged(bytes32,bytes32,bytes32)': EventFragment;
    'RoleGranted(bytes32,address,address)': EventFragment;
    'RoleRevoked(bytes32,address,address)': EventFragment;
    'ToggleExitNode(address,bool)': EventFragment;
    'Unpaused(address)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'AllowNodeExit'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'BtcRefunded'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'BurnRequested'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'BurnRevoked'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'BurnVerified'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Cooldown'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'GroupAdded'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'GroupDeleted'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'MintRequested'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'MintRevoked'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'MintVerified'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Paused'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RoleAdminChanged'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RoleGranted'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RoleRevoked'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ToggleExitNode'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Unpaused'): EventFragment;
}

export class MirrorSystem extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: MirrorSystemInterface;

  functions: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    'DEFAULT_ADMIN_ROLE()'(overrides?: CallOverrides): Promise<[string]>;

    GROUP_REUSING_GAP(overrides?: CallOverrides): Promise<[number]>;

    'GROUP_REUSING_GAP()'(overrides?: CallOverrides): Promise<[number]>;

    GROUP_ROLE(overrides?: CallOverrides): Promise<[string]>;

    'GROUP_ROLE()'(overrides?: CallOverrides): Promise<[string]>;

    GUARD_ROLE(overrides?: CallOverrides): Promise<[string]>;

    'GUARD_ROLE()'(overrides?: CallOverrides): Promise<[string]>;

    NODE_COOLDOWN(overrides?: CallOverrides): Promise<[number]>;

    'NODE_COOLDOWN()'(overrides?: CallOverrides): Promise<[number]>;

    MINT_REQUEST_GRACE_PERIOD(overrides?: CallOverrides): Promise<[number]>;

    'MINT_REQUEST_GRACE_PERIOD()'(overrides?: CallOverrides): Promise<[number]>;

    REFUND_GAP(overrides?: CallOverrides): Promise<[number]>;

    'REFUND_GAP()'(overrides?: CallOverrides): Promise<[number]>;

    WITHDRAW_VERIFICATION_END(overrides?: CallOverrides): Promise<[number]>;

    'WITHDRAW_VERIFICATION_END()'(overrides?: CallOverrides): Promise<[number]>;

    addGroup(
      btcAddress: string,
      required: BigNumberish,
      maxSatoshi: BigNumberish,
      nodes: string[],
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;

    'addGroup(string,uint32,uint32,address[])'(
      btcAddress: string,
      required: BigNumberish,
      maxSatoshi: BigNumberish,
      nodes: string[],
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;

    allowNodeExit(
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;

    'allowNodeExit()'(
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;

    chill(
      node: string,
      chillTime: BigNumberish,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;

    'chill(address,uint32)'(
      node: string,
      chillTime: BigNumberish,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;

    cooldownUntil(arg0: string, overrides?: CallOverrides): Promise<[number]>;

    'cooldownUntil(address)'(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[number]>;

    deleteGroup(
      btcAddress: string,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;

    'deleteGroup(string)'(
      btcAddress: string,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;

    deleteGroups(
      btcAddresses: string[],
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;

    'deleteGroups(string[])'(
      btcAddresses: string[],
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;

    fee(overrides?: CallOverrides): Promise<[string]>;

    'fee()'(overrides?: CallOverrides): Promise<[string]>;

    forceRequestMint(
      groupBtcAddress: string,
      amountInSatoshi: BigNumberish,
      nonce: BigNumberish,
      overrides?: PayableOverrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;

    'forceRequestMint(string,uint32,uint32)'(
      groupBtcAddress: string,
      amountInSatoshi: BigNumberish,
      nonce: BigNumberish,
      overrides?: PayableOverrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;

    getGroup(
      btcAddress: string,
      overrides?: CallOverrides
    ): Promise<
      [number, number, number, number, string[], string] & {
        required: number;
        maxSatoshi: number;
        currSatoshi: number;
        nonce: number;
        nodes: string[];
        workingReceiptId: string;
      }
    >;

    'getGroup(string)'(
      btcAddress: string,
      overrides?: CallOverrides
    ): Promise<
      [number, number, number, number, string[], string] & {
        required: number;
        maxSatoshi: number;
        currSatoshi: number;
        nonce: number;
        nodes: string[];
        workingReceiptId: string;
      }
    >;

    getReceipt(
      receiptId: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [
        [string, string, string, number, number, number, string, number] & {
          groupBtcAddress: string;
          withdrawBtcAddress: string;
          txId: string;
          amountInSatoshi: number;
          updateTimestamp: number;
          height: number;
          recipient: string;
          status: number;
        }
      ]
    >;

    'getReceipt(bytes32)'(
      receiptId: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [
        [string, string, string, number, number, number, string, number] & {
          groupBtcAddress: string;
          withdrawBtcAddress: string;
          txId: string;
          amountInSatoshi: number;
          updateTimestamp: number;
          height: number;
          recipient: string;
          status: number;
        }
      ]
    >;

    getReceiptId(
      groupBtcAddress: string,
      nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    'getReceiptId(string,uint256)'(
      groupBtcAddress: string,
      nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getRefundData(overrides?: CallOverrides): Promise<
      [
        [string, string, number] & {
          txId: string;
          groupBtcAddress: string;
          expiryTimestamp: number;
        }
      ]
    >;

    'getRefundData()'(overrides?: CallOverrides): Promise<
      [
        [string, string, number] & {
          txId: string;
          groupBtcAddress: string;
          expiryTimestamp: number;
        }
      ]
    >;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    'getRoleAdmin(bytes32)'(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    'getRoleMember(bytes32,uint256)'(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    'getRoleMemberCount(bytes32)'(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;

    'grantRole(bytes32,address)'(
      role: BytesLike,
      account: string,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    'hasRole(bytes32,address)'(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    initialize(
      _sats: string,
      _registry: string,
      _rewarder: string,
      _fee: string,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;

    'initialize(address,address,address,address)'(
      _sats: string,
      _registry: string,
      _rewarder: string,
      _fee: string,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;

    nodeExitAllowed(overrides?: CallOverrides): Promise<[boolean]>;

    'nodeExitAllowed()'(overrides?: CallOverrides): Promise<[boolean]>;

    nodeExiting(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    'nodeExiting(address)'(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    nodeRegistry(overrides?: CallOverrides): Promise<[string]>;

    'nodeRegistry()'(overrides?: CallOverrides): Promise<[string]>;

    pause(
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;

    'pause()'(
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    'paused()'(overrides?: CallOverrides): Promise<[boolean]>;

    recoverBurn(
      receiptId: BytesLike,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;

    'recoverBurn(bytes32)'(
      receiptId: BytesLike,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;

    refundBtc(
      groupBtcAddress: string,
      txId: BytesLike,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;

    'refundBtc(string,bytes32)'(
      groupBtcAddress: string,
      txId: BytesLike,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;

    'renounceRole(bytes32,address)'(
      role: BytesLike,
      account: string,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;

    requestBurn(
      receiptId: BytesLike,
      withdrawBtcAddress: string,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;

    'requestBurn(bytes32,string)'(
      receiptId: BytesLike,
      withdrawBtcAddress: string,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;

    requestMint(
      groupBtcAddress: string,
      amountInSatoshi: BigNumberish,
      nonce: BigNumberish,
      overrides?: PayableOverrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;

    'requestMint(string,uint32,uint32)'(
      groupBtcAddress: string,
      amountInSatoshi: BigNumberish,
      nonce: BigNumberish,
      overrides?: PayableOverrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;

    revokeMint(
      receiptId: BytesLike,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;

    'revokeMint(bytes32)'(
      receiptId: BytesLike,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;

    'revokeRole(bytes32,address)'(
      role: BytesLike,
      account: string,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;

    rewarder(overrides?: CallOverrides): Promise<[string]>;

    'rewarder()'(overrides?: CallOverrides): Promise<[string]>;

    sats(overrides?: CallOverrides): Promise<[string]>;

    'sats()'(overrides?: CallOverrides): Promise<[string]>;

    toggleExitNode(
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;

    'toggleExitNode()'(
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;

    unpause(
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;

    'unpause()'(
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;

    verifyBurn(
      receiptId: BytesLike,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;

    'verifyBurn(bytes32)'(
      receiptId: BytesLike,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;

    verifyMint(
      request: {receiptId: BytesLike; txId: BytesLike; height: BigNumberish},
      nodes: string[],
      r: BytesLike[],
      s: BytesLike[],
      packedV: BigNumberish,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;

    'verifyMint((bytes32,bytes32,uint32),address[],bytes32[],bytes32[],uint256)'(
      request: {receiptId: BytesLike; txId: BytesLike; height: BigNumberish},
      nodes: string[],
      r: BytesLike[],
      s: BytesLike[],
      packedV: BigNumberish,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;
  };

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  'DEFAULT_ADMIN_ROLE()'(overrides?: CallOverrides): Promise<string>;

  GROUP_REUSING_GAP(overrides?: CallOverrides): Promise<number>;

  'GROUP_REUSING_GAP()'(overrides?: CallOverrides): Promise<number>;

  GROUP_ROLE(overrides?: CallOverrides): Promise<string>;

  'GROUP_ROLE()'(overrides?: CallOverrides): Promise<string>;

  GUARD_ROLE(overrides?: CallOverrides): Promise<string>;

  'GUARD_ROLE()'(overrides?: CallOverrides): Promise<string>;

  NODE_COOLDOWN(overrides?: CallOverrides): Promise<number>;

  'NODE_COOLDOWN()'(overrides?: CallOverrides): Promise<number>;

  MINT_REQUEST_GRACE_PERIOD(overrides?: CallOverrides): Promise<number>;

  'MINT_REQUEST_GRACE_PERIOD()'(overrides?: CallOverrides): Promise<number>;

  REFUND_GAP(overrides?: CallOverrides): Promise<number>;

  'REFUND_GAP()'(overrides?: CallOverrides): Promise<number>;

  WITHDRAW_VERIFICATION_END(overrides?: CallOverrides): Promise<number>;

  'WITHDRAW_VERIFICATION_END()'(overrides?: CallOverrides): Promise<number>;

  addGroup(
    btcAddress: string,
    required: BigNumberish,
    maxSatoshi: BigNumberish,
    nodes: string[],
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  'addGroup(string,uint32,uint32,address[])'(
    btcAddress: string,
    required: BigNumberish,
    maxSatoshi: BigNumberish,
    nodes: string[],
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  allowNodeExit(
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  'allowNodeExit()'(
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  chill(
    node: string,
    chillTime: BigNumberish,
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  'chill(address,uint32)'(
    node: string,
    chillTime: BigNumberish,
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  cooldownUntil(arg0: string, overrides?: CallOverrides): Promise<number>;

  'cooldownUntil(address)'(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<number>;

  deleteGroup(
    btcAddress: string,
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  'deleteGroup(string)'(
    btcAddress: string,
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  deleteGroups(
    btcAddresses: string[],
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  'deleteGroups(string[])'(
    btcAddresses: string[],
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  fee(overrides?: CallOverrides): Promise<string>;

  'fee()'(overrides?: CallOverrides): Promise<string>;

  forceRequestMint(
    groupBtcAddress: string,
    amountInSatoshi: BigNumberish,
    nonce: BigNumberish,
    overrides?: PayableOverrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  'forceRequestMint(string,uint32,uint32)'(
    groupBtcAddress: string,
    amountInSatoshi: BigNumberish,
    nonce: BigNumberish,
    overrides?: PayableOverrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  getGroup(
    btcAddress: string,
    overrides?: CallOverrides
  ): Promise<
    [number, number, number, number, string[], string] & {
      required: number;
      maxSatoshi: number;
      currSatoshi: number;
      nonce: number;
      nodes: string[];
      workingReceiptId: string;
    }
  >;

  'getGroup(string)'(
    btcAddress: string,
    overrides?: CallOverrides
  ): Promise<
    [number, number, number, number, string[], string] & {
      required: number;
      maxSatoshi: number;
      currSatoshi: number;
      nonce: number;
      nodes: string[];
      workingReceiptId: string;
    }
  >;

  getReceipt(
    receiptId: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, number, number, number, string, number] & {
      groupBtcAddress: string;
      withdrawBtcAddress: string;
      txId: string;
      amountInSatoshi: number;
      updateTimestamp: number;
      height: number;
      recipient: string;
      status: number;
    }
  >;

  'getReceipt(bytes32)'(
    receiptId: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, number, number, number, string, number] & {
      groupBtcAddress: string;
      withdrawBtcAddress: string;
      txId: string;
      amountInSatoshi: number;
      updateTimestamp: number;
      height: number;
      recipient: string;
      status: number;
    }
  >;

  getReceiptId(
    groupBtcAddress: string,
    nonce: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  'getReceiptId(string,uint256)'(
    groupBtcAddress: string,
    nonce: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getRefundData(overrides?: CallOverrides): Promise<
    [string, string, number] & {
      txId: string;
      groupBtcAddress: string;
      expiryTimestamp: number;
    }
  >;

  'getRefundData()'(overrides?: CallOverrides): Promise<
    [string, string, number] & {
      txId: string;
      groupBtcAddress: string;
      expiryTimestamp: number;
    }
  >;

  getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

  'getRoleAdmin(bytes32)'(
    role: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  getRoleMember(
    role: BytesLike,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  'getRoleMember(bytes32,uint256)'(
    role: BytesLike,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getRoleMemberCount(
    role: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  'getRoleMemberCount(bytes32)'(
    role: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  grantRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  'grantRole(bytes32,address)'(
    role: BytesLike,
    account: string,
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  hasRole(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  'hasRole(bytes32,address)'(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  initialize(
    _sats: string,
    _registry: string,
    _rewarder: string,
    _fee: string,
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  'initialize(address,address,address,address)'(
    _sats: string,
    _registry: string,
    _rewarder: string,
    _fee: string,
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  nodeExitAllowed(overrides?: CallOverrides): Promise<boolean>;

  'nodeExitAllowed()'(overrides?: CallOverrides): Promise<boolean>;

  nodeExiting(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  'nodeExiting(address)'(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  nodeRegistry(overrides?: CallOverrides): Promise<string>;

  'nodeRegistry()'(overrides?: CallOverrides): Promise<string>;

  pause(
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  'pause()'(
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  'paused()'(overrides?: CallOverrides): Promise<boolean>;

  recoverBurn(
    receiptId: BytesLike,
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  'recoverBurn(bytes32)'(
    receiptId: BytesLike,
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  refundBtc(
    groupBtcAddress: string,
    txId: BytesLike,
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  'refundBtc(string,bytes32)'(
    groupBtcAddress: string,
    txId: BytesLike,
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  renounceRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  'renounceRole(bytes32,address)'(
    role: BytesLike,
    account: string,
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  requestBurn(
    receiptId: BytesLike,
    withdrawBtcAddress: string,
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  'requestBurn(bytes32,string)'(
    receiptId: BytesLike,
    withdrawBtcAddress: string,
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  requestMint(
    groupBtcAddress: string,
    amountInSatoshi: BigNumberish,
    nonce: BigNumberish,
    overrides?: PayableOverrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  'requestMint(string,uint32,uint32)'(
    groupBtcAddress: string,
    amountInSatoshi: BigNumberish,
    nonce: BigNumberish,
    overrides?: PayableOverrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  revokeMint(
    receiptId: BytesLike,
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  'revokeMint(bytes32)'(
    receiptId: BytesLike,
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  revokeRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  'revokeRole(bytes32,address)'(
    role: BytesLike,
    account: string,
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  rewarder(overrides?: CallOverrides): Promise<string>;

  'rewarder()'(overrides?: CallOverrides): Promise<string>;

  sats(overrides?: CallOverrides): Promise<string>;

  'sats()'(overrides?: CallOverrides): Promise<string>;

  toggleExitNode(
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  'toggleExitNode()'(
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  unpause(
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  'unpause()'(
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  verifyBurn(
    receiptId: BytesLike,
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  'verifyBurn(bytes32)'(
    receiptId: BytesLike,
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  verifyMint(
    request: {receiptId: BytesLike; txId: BytesLike; height: BigNumberish},
    nodes: string[],
    r: BytesLike[],
    s: BytesLike[],
    packedV: BigNumberish,
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  'verifyMint((bytes32,bytes32,uint32),address[],bytes32[],bytes32[],uint256)'(
    request: {receiptId: BytesLike; txId: BytesLike; height: BigNumberish},
    nodes: string[],
    r: BytesLike[],
    s: BytesLike[],
    packedV: BigNumberish,
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  callStatic: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    'DEFAULT_ADMIN_ROLE()'(overrides?: CallOverrides): Promise<string>;

    GROUP_REUSING_GAP(overrides?: CallOverrides): Promise<number>;

    'GROUP_REUSING_GAP()'(overrides?: CallOverrides): Promise<number>;

    GROUP_ROLE(overrides?: CallOverrides): Promise<string>;

    'GROUP_ROLE()'(overrides?: CallOverrides): Promise<string>;

    GUARD_ROLE(overrides?: CallOverrides): Promise<string>;

    'GUARD_ROLE()'(overrides?: CallOverrides): Promise<string>;

    NODE_COOLDOWN(overrides?: CallOverrides): Promise<number>;

    'NODE_COOLDOWN()'(overrides?: CallOverrides): Promise<number>;

    MINT_REQUEST_GRACE_PERIOD(overrides?: CallOverrides): Promise<number>;

    'MINT_REQUEST_GRACE_PERIOD()'(overrides?: CallOverrides): Promise<number>;

    REFUND_GAP(overrides?: CallOverrides): Promise<number>;

    'REFUND_GAP()'(overrides?: CallOverrides): Promise<number>;

    WITHDRAW_VERIFICATION_END(overrides?: CallOverrides): Promise<number>;

    'WITHDRAW_VERIFICATION_END()'(overrides?: CallOverrides): Promise<number>;

    addGroup(
      btcAddress: string,
      required: BigNumberish,
      maxSatoshi: BigNumberish,
      nodes: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    'addGroup(string,uint32,uint32,address[])'(
      btcAddress: string,
      required: BigNumberish,
      maxSatoshi: BigNumberish,
      nodes: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    allowNodeExit(overrides?: CallOverrides): Promise<void>;

    'allowNodeExit()'(overrides?: CallOverrides): Promise<void>;

    chill(
      node: string,
      chillTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    'chill(address,uint32)'(
      node: string,
      chillTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    cooldownUntil(arg0: string, overrides?: CallOverrides): Promise<number>;

    'cooldownUntil(address)'(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<number>;

    deleteGroup(btcAddress: string, overrides?: CallOverrides): Promise<void>;

    'deleteGroup(string)'(
      btcAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    deleteGroups(
      btcAddresses: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    'deleteGroups(string[])'(
      btcAddresses: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    fee(overrides?: CallOverrides): Promise<string>;

    'fee()'(overrides?: CallOverrides): Promise<string>;

    forceRequestMint(
      groupBtcAddress: string,
      amountInSatoshi: BigNumberish,
      nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    'forceRequestMint(string,uint32,uint32)'(
      groupBtcAddress: string,
      amountInSatoshi: BigNumberish,
      nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getGroup(
      btcAddress: string,
      overrides?: CallOverrides
    ): Promise<
      [number, number, number, number, string[], string] & {
        required: number;
        maxSatoshi: number;
        currSatoshi: number;
        nonce: number;
        nodes: string[];
        workingReceiptId: string;
      }
    >;

    'getGroup(string)'(
      btcAddress: string,
      overrides?: CallOverrides
    ): Promise<
      [number, number, number, number, string[], string] & {
        required: number;
        maxSatoshi: number;
        currSatoshi: number;
        nonce: number;
        nodes: string[];
        workingReceiptId: string;
      }
    >;

    getReceipt(
      receiptId: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, number, number, number, string, number] & {
        groupBtcAddress: string;
        withdrawBtcAddress: string;
        txId: string;
        amountInSatoshi: number;
        updateTimestamp: number;
        height: number;
        recipient: string;
        status: number;
      }
    >;

    'getReceipt(bytes32)'(
      receiptId: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, number, number, number, string, number] & {
        groupBtcAddress: string;
        withdrawBtcAddress: string;
        txId: string;
        amountInSatoshi: number;
        updateTimestamp: number;
        height: number;
        recipient: string;
        status: number;
      }
    >;

    getReceiptId(
      groupBtcAddress: string,
      nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    'getReceiptId(string,uint256)'(
      groupBtcAddress: string,
      nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getRefundData(overrides?: CallOverrides): Promise<
      [string, string, number] & {
        txId: string;
        groupBtcAddress: string;
        expiryTimestamp: number;
      }
    >;

    'getRefundData()'(overrides?: CallOverrides): Promise<
      [string, string, number] & {
        txId: string;
        groupBtcAddress: string;
        expiryTimestamp: number;
      }
    >;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

    'getRoleAdmin(bytes32)'(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    'getRoleMember(bytes32,uint256)'(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    'getRoleMemberCount(bytes32)'(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    'grantRole(bytes32,address)'(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    'hasRole(bytes32,address)'(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initialize(
      _sats: string,
      _registry: string,
      _rewarder: string,
      _fee: string,
      overrides?: CallOverrides
    ): Promise<void>;

    'initialize(address,address,address,address)'(
      _sats: string,
      _registry: string,
      _rewarder: string,
      _fee: string,
      overrides?: CallOverrides
    ): Promise<void>;

    nodeExitAllowed(overrides?: CallOverrides): Promise<boolean>;

    'nodeExitAllowed()'(overrides?: CallOverrides): Promise<boolean>;

    nodeExiting(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    'nodeExiting(address)'(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    nodeRegistry(overrides?: CallOverrides): Promise<string>;

    'nodeRegistry()'(overrides?: CallOverrides): Promise<string>;

    pause(overrides?: CallOverrides): Promise<void>;

    'pause()'(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    'paused()'(overrides?: CallOverrides): Promise<boolean>;

    recoverBurn(receiptId: BytesLike, overrides?: CallOverrides): Promise<void>;

    'recoverBurn(bytes32)'(
      receiptId: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    refundBtc(
      groupBtcAddress: string,
      txId: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    'refundBtc(string,bytes32)'(
      groupBtcAddress: string,
      txId: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    'renounceRole(bytes32,address)'(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    requestBurn(
      receiptId: BytesLike,
      withdrawBtcAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    'requestBurn(bytes32,string)'(
      receiptId: BytesLike,
      withdrawBtcAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    requestMint(
      groupBtcAddress: string,
      amountInSatoshi: BigNumberish,
      nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    'requestMint(string,uint32,uint32)'(
      groupBtcAddress: string,
      amountInSatoshi: BigNumberish,
      nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeMint(receiptId: BytesLike, overrides?: CallOverrides): Promise<void>;

    'revokeMint(bytes32)'(
      receiptId: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    'revokeRole(bytes32,address)'(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    rewarder(overrides?: CallOverrides): Promise<string>;

    'rewarder()'(overrides?: CallOverrides): Promise<string>;

    sats(overrides?: CallOverrides): Promise<string>;

    'sats()'(overrides?: CallOverrides): Promise<string>;

    toggleExitNode(overrides?: CallOverrides): Promise<void>;

    'toggleExitNode()'(overrides?: CallOverrides): Promise<void>;

    unpause(overrides?: CallOverrides): Promise<void>;

    'unpause()'(overrides?: CallOverrides): Promise<void>;

    verifyBurn(receiptId: BytesLike, overrides?: CallOverrides): Promise<void>;

    'verifyBurn(bytes32)'(
      receiptId: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    verifyMint(
      request: {receiptId: BytesLike; txId: BytesLike; height: BigNumberish},
      nodes: string[],
      r: BytesLike[],
      s: BytesLike[],
      packedV: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    'verifyMint((bytes32,bytes32,uint32),address[],bytes32[],bytes32[],uint256)'(
      request: {receiptId: BytesLike; txId: BytesLike; height: BigNumberish},
      nodes: string[],
      r: BytesLike[],
      s: BytesLike[],
      packedV: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    AllowNodeExit(
      operator: string | null
    ): TypedEventFilter<[string], {operator: string}>;

    BtcRefunded(
      groupBtcAddress: null,
      txId: null,
      expiryTimestamp: null
    ): TypedEventFilter<
      [string, string, number],
      {groupBtcAddress: string; txId: string; expiryTimestamp: number}
    >;

    BurnRequested(
      receiptId: BytesLike | null,
      groupBtcAddress: null,
      withdrawBtcAddress: null,
      operator: null
    ): TypedEventFilter<
      [string, string, string, string],
      {
        receiptId: string;
        groupBtcAddress: string;
        withdrawBtcAddress: string;
        operator: string;
      }
    >;

    BurnRevoked(
      receiptId: BytesLike | null,
      groupBtcAddress: null,
      recipient: null,
      operator: null
    ): TypedEventFilter<
      [string, string, string, string],
      {
        receiptId: string;
        groupBtcAddress: string;
        recipient: string;
        operator: string;
      }
    >;

    BurnVerified(
      receiptId: BytesLike | null,
      groupBtcAddress: null,
      operator: null
    ): TypedEventFilter<
      [string, string, string],
      {receiptId: string; groupBtcAddress: string; operator: string}
    >;

    Cooldown(
      node: string | null,
      endTime: null
    ): TypedEventFilter<[string, number], {node: string; endTime: number}>;

    GroupAdded(
      btcAddress: null,
      required: null,
      maxSatoshi: null,
      nodes: null
    ): TypedEventFilter<
      [string, number, number, string[]],
      {
        btcAddress: string;
        required: number;
        maxSatoshi: number;
        nodes: string[];
      }
    >;

    GroupDeleted(
      btcAddress: null
    ): TypedEventFilter<[string], {btcAddress: string}>;

    MintRequested(
      receiptId: BytesLike | null,
      recipient: string | null,
      amountInSatoshi: null,
      groupBtcAddress: null
    ): TypedEventFilter<
      [string, string, number, string],
      {
        receiptId: string;
        recipient: string;
        amountInSatoshi: number;
        groupBtcAddress: string;
      }
    >;

    MintRevoked(
      receiptId: BytesLike | null,
      groupBtcAddress: null,
      operator: null
    ): TypedEventFilter<
      [string, string, string],
      {receiptId: string; groupBtcAddress: string; operator: string}
    >;

    MintVerified(
      receiptId: BytesLike | null,
      groupBtcAddress: null,
      nodes: null,
      btcTxId: null,
      btcTxHeight: null
    ): TypedEventFilter<
      [string, string, string[], string, number],
      {
        receiptId: string;
        groupBtcAddress: string;
        nodes: string[];
        btcTxId: string;
        btcTxHeight: number;
      }
    >;

    Paused(account: null): TypedEventFilter<[string], {account: string}>;

    RoleAdminChanged(
      role: BytesLike | null,
      previousAdminRole: BytesLike | null,
      newAdminRole: BytesLike | null
    ): TypedEventFilter<
      [string, string, string],
      {role: string; previousAdminRole: string; newAdminRole: string}
    >;

    RoleGranted(
      role: BytesLike | null,
      account: string | null,
      sender: string | null
    ): TypedEventFilter<
      [string, string, string],
      {role: string; account: string; sender: string}
    >;

    RoleRevoked(
      role: BytesLike | null,
      account: string | null,
      sender: string | null
    ): TypedEventFilter<
      [string, string, string],
      {role: string; account: string; sender: string}
    >;

    ToggleExitNode(
      node: string | null,
      isExit: null
    ): TypedEventFilter<[string, boolean], {node: string; isExit: boolean}>;

    Unpaused(account: null): TypedEventFilter<[string], {account: string}>;
  };

  estimateGas: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    'DEFAULT_ADMIN_ROLE()'(overrides?: CallOverrides): Promise<BigNumber>;

    GROUP_REUSING_GAP(overrides?: CallOverrides): Promise<BigNumber>;

    'GROUP_REUSING_GAP()'(overrides?: CallOverrides): Promise<BigNumber>;

    GROUP_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    'GROUP_ROLE()'(overrides?: CallOverrides): Promise<BigNumber>;

    GUARD_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    'GUARD_ROLE()'(overrides?: CallOverrides): Promise<BigNumber>;

    NODE_COOLDOWN(overrides?: CallOverrides): Promise<BigNumber>;

    'NODE_COOLDOWN()'(overrides?: CallOverrides): Promise<BigNumber>;

    MINT_REQUEST_GRACE_PERIOD(overrides?: CallOverrides): Promise<BigNumber>;

    'MINT_REQUEST_GRACE_PERIOD()'(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    REFUND_GAP(overrides?: CallOverrides): Promise<BigNumber>;

    'REFUND_GAP()'(overrides?: CallOverrides): Promise<BigNumber>;

    WITHDRAW_VERIFICATION_END(overrides?: CallOverrides): Promise<BigNumber>;

    'WITHDRAW_VERIFICATION_END()'(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addGroup(
      btcAddress: string,
      required: BigNumberish,
      maxSatoshi: BigNumberish,
      nodes: string[],
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;

    'addGroup(string,uint32,uint32,address[])'(
      btcAddress: string,
      required: BigNumberish,
      maxSatoshi: BigNumberish,
      nodes: string[],
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;

    allowNodeExit(
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;

    'allowNodeExit()'(
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;

    chill(
      node: string,
      chillTime: BigNumberish,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;

    'chill(address,uint32)'(
      node: string,
      chillTime: BigNumberish,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;

    cooldownUntil(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    'cooldownUntil(address)'(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deleteGroup(
      btcAddress: string,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;

    'deleteGroup(string)'(
      btcAddress: string,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;

    deleteGroups(
      btcAddresses: string[],
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;

    'deleteGroups(string[])'(
      btcAddresses: string[],
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;

    fee(overrides?: CallOverrides): Promise<BigNumber>;

    'fee()'(overrides?: CallOverrides): Promise<BigNumber>;

    forceRequestMint(
      groupBtcAddress: string,
      amountInSatoshi: BigNumberish,
      nonce: BigNumberish,
      overrides?: PayableOverrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;

    'forceRequestMint(string,uint32,uint32)'(
      groupBtcAddress: string,
      amountInSatoshi: BigNumberish,
      nonce: BigNumberish,
      overrides?: PayableOverrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;

    getGroup(btcAddress: string, overrides?: CallOverrides): Promise<BigNumber>;

    'getGroup(string)'(
      btcAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReceipt(
      receiptId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    'getReceipt(bytes32)'(
      receiptId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReceiptId(
      groupBtcAddress: string,
      nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    'getReceiptId(string,uint256)'(
      groupBtcAddress: string,
      nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRefundData(overrides?: CallOverrides): Promise<BigNumber>;

    'getRefundData()'(overrides?: CallOverrides): Promise<BigNumber>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    'getRoleAdmin(bytes32)'(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    'getRoleMember(bytes32,uint256)'(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    'getRoleMemberCount(bytes32)'(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;

    'grantRole(bytes32,address)'(
      role: BytesLike,
      account: string,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    'hasRole(bytes32,address)'(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _sats: string,
      _registry: string,
      _rewarder: string,
      _fee: string,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;

    'initialize(address,address,address,address)'(
      _sats: string,
      _registry: string,
      _rewarder: string,
      _fee: string,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;

    nodeExitAllowed(overrides?: CallOverrides): Promise<BigNumber>;

    'nodeExitAllowed()'(overrides?: CallOverrides): Promise<BigNumber>;

    nodeExiting(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    'nodeExiting(address)'(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nodeRegistry(overrides?: CallOverrides): Promise<BigNumber>;

    'nodeRegistry()'(overrides?: CallOverrides): Promise<BigNumber>;

    pause(
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;

    'pause()'(
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    'paused()'(overrides?: CallOverrides): Promise<BigNumber>;

    recoverBurn(
      receiptId: BytesLike,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;

    'recoverBurn(bytes32)'(
      receiptId: BytesLike,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;

    refundBtc(
      groupBtcAddress: string,
      txId: BytesLike,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;

    'refundBtc(string,bytes32)'(
      groupBtcAddress: string,
      txId: BytesLike,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;

    'renounceRole(bytes32,address)'(
      role: BytesLike,
      account: string,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;

    requestBurn(
      receiptId: BytesLike,
      withdrawBtcAddress: string,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;

    'requestBurn(bytes32,string)'(
      receiptId: BytesLike,
      withdrawBtcAddress: string,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;

    requestMint(
      groupBtcAddress: string,
      amountInSatoshi: BigNumberish,
      nonce: BigNumberish,
      overrides?: PayableOverrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;

    'requestMint(string,uint32,uint32)'(
      groupBtcAddress: string,
      amountInSatoshi: BigNumberish,
      nonce: BigNumberish,
      overrides?: PayableOverrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;

    revokeMint(
      receiptId: BytesLike,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;

    'revokeMint(bytes32)'(
      receiptId: BytesLike,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;

    'revokeRole(bytes32,address)'(
      role: BytesLike,
      account: string,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;

    rewarder(overrides?: CallOverrides): Promise<BigNumber>;

    'rewarder()'(overrides?: CallOverrides): Promise<BigNumber>;

    sats(overrides?: CallOverrides): Promise<BigNumber>;

    'sats()'(overrides?: CallOverrides): Promise<BigNumber>;

    toggleExitNode(
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;

    'toggleExitNode()'(
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;

    'unpause()'(
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;

    verifyBurn(
      receiptId: BytesLike,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;

    'verifyBurn(bytes32)'(
      receiptId: BytesLike,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;

    verifyMint(
      request: {receiptId: BytesLike; txId: BytesLike; height: BigNumberish},
      nodes: string[],
      r: BytesLike[],
      s: BytesLike[],
      packedV: BigNumberish,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;

    'verifyMint((bytes32,bytes32,uint32),address[],bytes32[],bytes32[],uint256)'(
      request: {receiptId: BytesLike; txId: BytesLike; height: BigNumberish},
      nodes: string[],
      r: BytesLike[],
      s: BytesLike[],
      packedV: BigNumberish,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    'DEFAULT_ADMIN_ROLE()'(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    GROUP_REUSING_GAP(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'GROUP_REUSING_GAP()'(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    GROUP_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'GROUP_ROLE()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    GUARD_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'GUARD_ROLE()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    NODE_COOLDOWN(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'NODE_COOLDOWN()'(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MINT_REQUEST_GRACE_PERIOD(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    'MINT_REQUEST_GRACE_PERIOD()'(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    REFUND_GAP(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'REFUND_GAP()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    WITHDRAW_VERIFICATION_END(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    'WITHDRAW_VERIFICATION_END()'(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addGroup(
      btcAddress: string,
      required: BigNumberish,
      maxSatoshi: BigNumberish,
      nodes: string[],
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;

    'addGroup(string,uint32,uint32,address[])'(
      btcAddress: string,
      required: BigNumberish,
      maxSatoshi: BigNumberish,
      nodes: string[],
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;

    allowNodeExit(
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;

    'allowNodeExit()'(
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;

    chill(
      node: string,
      chillTime: BigNumberish,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;

    'chill(address,uint32)'(
      node: string,
      chillTime: BigNumberish,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;

    cooldownUntil(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    'cooldownUntil(address)'(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deleteGroup(
      btcAddress: string,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;

    'deleteGroup(string)'(
      btcAddress: string,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;

    deleteGroups(
      btcAddresses: string[],
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;

    'deleteGroups(string[])'(
      btcAddresses: string[],
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;

    fee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'fee()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    forceRequestMint(
      groupBtcAddress: string,
      amountInSatoshi: BigNumberish,
      nonce: BigNumberish,
      overrides?: PayableOverrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;

    'forceRequestMint(string,uint32,uint32)'(
      groupBtcAddress: string,
      amountInSatoshi: BigNumberish,
      nonce: BigNumberish,
      overrides?: PayableOverrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;

    getGroup(
      btcAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    'getGroup(string)'(
      btcAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getReceipt(
      receiptId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    'getReceipt(bytes32)'(
      receiptId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getReceiptId(
      groupBtcAddress: string,
      nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    'getReceiptId(string,uint256)'(
      groupBtcAddress: string,
      nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRefundData(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'getRefundData()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    'getRoleAdmin(bytes32)'(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    'getRoleMember(bytes32,uint256)'(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    'getRoleMemberCount(bytes32)'(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;

    'grantRole(bytes32,address)'(
      role: BytesLike,
      account: string,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    'hasRole(bytes32,address)'(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _sats: string,
      _registry: string,
      _rewarder: string,
      _fee: string,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;

    'initialize(address,address,address,address)'(
      _sats: string,
      _registry: string,
      _rewarder: string,
      _fee: string,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;

    nodeExitAllowed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'nodeExitAllowed()'(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nodeExiting(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    'nodeExiting(address)'(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nodeRegistry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'nodeRegistry()'(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;

    'pause()'(
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'paused()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    recoverBurn(
      receiptId: BytesLike,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;

    'recoverBurn(bytes32)'(
      receiptId: BytesLike,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;

    refundBtc(
      groupBtcAddress: string,
      txId: BytesLike,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;

    'refundBtc(string,bytes32)'(
      groupBtcAddress: string,
      txId: BytesLike,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;

    'renounceRole(bytes32,address)'(
      role: BytesLike,
      account: string,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;

    requestBurn(
      receiptId: BytesLike,
      withdrawBtcAddress: string,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;

    'requestBurn(bytes32,string)'(
      receiptId: BytesLike,
      withdrawBtcAddress: string,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;

    requestMint(
      groupBtcAddress: string,
      amountInSatoshi: BigNumberish,
      nonce: BigNumberish,
      overrides?: PayableOverrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;

    'requestMint(string,uint32,uint32)'(
      groupBtcAddress: string,
      amountInSatoshi: BigNumberish,
      nonce: BigNumberish,
      overrides?: PayableOverrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;

    revokeMint(
      receiptId: BytesLike,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;

    'revokeMint(bytes32)'(
      receiptId: BytesLike,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;

    'revokeRole(bytes32,address)'(
      role: BytesLike,
      account: string,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;

    rewarder(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'rewarder()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sats(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'sats()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    toggleExitNode(
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;

    'toggleExitNode()'(
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;

    'unpause()'(
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;

    verifyBurn(
      receiptId: BytesLike,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;

    'verifyBurn(bytes32)'(
      receiptId: BytesLike,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;

    verifyMint(
      request: {receiptId: BytesLike; txId: BytesLike; height: BigNumberish},
      nodes: string[],
      r: BytesLike[],
      s: BytesLike[],
      packedV: BigNumberish,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;

    'verifyMint((bytes32,bytes32,uint32),address[],bytes32[],bytes32[],uint256)'(
      request: {receiptId: BytesLike; txId: BytesLike; height: BigNumberish},
      nodes: string[],
      r: BytesLike[],
      s: BytesLike[],
      packedV: BigNumberish,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;
  };
}
