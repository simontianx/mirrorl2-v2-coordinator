/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from 'ethers';
import {BytesLike} from '@ethersproject/bytes';
import {Listener, Provider} from '@ethersproject/providers';
import {FunctionFragment, EventFragment, Result} from '@ethersproject/abi';
import {TypedEventFilter, TypedEvent, TypedListener} from './commons';

interface NodeRegistryInterface extends ethers.utils.Interface {
  functions: {
    'MIN_NODE_PERIOD()': FunctionFragment;
    'addAsset(address)': FunctionFragment;
    'addConfiscation(address,address,uint256)': FunctionFragment;
    'addNode(address,uint256)': FunctionFragment;
    'addOverissue(uint256)': FunctionFragment;
    'allowance(address,address)': FunctionFragment;
    'approve(address,uint256)': FunctionFragment;
    'balanceOf(address)': FunctionFragment;
    'btcRater()': FunctionFragment;
    'confiscate(address[])': FunctionFragment;
    'confiscations(address)': FunctionFragment;
    'decimals()': FunctionFragment;
    'decreaseAllowance(address,uint256)': FunctionFragment;
    'decrementRefCount(address)': FunctionFragment;
    'deleteNode(uint256)': FunctionFragment;
    'earlyExitFeeBps()': FunctionFragment;
    'getCollateralWei(address)': FunctionFragment;
    'getNode(address)': FunctionFragment;
    'importNodes(uint256,address,address[])': FunctionFragment;
    'increaseAllowance(address,uint256)': FunctionFragment;
    'incrementRefCount(address)': FunctionFragment;
    'isNodeQualified(address)': FunctionFragment;
    'nodeData(address)': FunctionFragment;
    'liquidation()': FunctionFragment;
    'minNodeCollateral()': FunctionFragment;
    'name()': FunctionFragment;
    'offsetOverissue(uint256)': FunctionFragment;
    'overissuedTotal()': FunctionFragment;
    'owner()': FunctionFragment;
    'punishNode(address[])': FunctionFragment;
    'renounceOwnership()': FunctionFragment;
    'sats()': FunctionFragment;
    'setSystem(address)': FunctionFragment;
    'swapAsset(address,uint256)': FunctionFragment;
    'symbol()': FunctionFragment;
    'system()': FunctionFragment;
    'totalSupply()': FunctionFragment;
    'transfer(address,uint256)': FunctionFragment;
    'transferFrom(address,address,uint256)': FunctionFragment;
    'transferOwnership(address)': FunctionFragment;
    'updateEarlyExitFeeBps(uint8)': FunctionFragment;
    'updateLiquidation(address)': FunctionFragment;
    'updateMinNodeCollateral(uint256)': FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: 'MIN_NODE_PERIOD',
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: 'addAsset', values: [string]): string;
  encodeFunctionData(
    functionFragment: 'addConfiscation',
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'addNode',
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'addOverissue',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'allowance',
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: 'approve',
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: 'balanceOf', values: [string]): string;
  encodeFunctionData(functionFragment: 'btcRater', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'confiscate',
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: 'confiscations',
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: 'decimals', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'decreaseAllowance',
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'decrementRefCount',
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: 'deleteNode',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'earlyExitFeeBps',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'getCollateralWei',
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: 'getNode', values: [string]): string;
  encodeFunctionData(
    functionFragment: 'importNodes',
    values: [BigNumberish, string, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: 'increaseAllowance',
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'incrementRefCount',
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: 'isNodeQualified',
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: 'nodeData', values: [string]): string;
  encodeFunctionData(
    functionFragment: 'liquidation',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'minNodeCollateral',
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: 'name', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'offsetOverissue',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'overissuedTotal',
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'punishNode',
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: 'renounceOwnership',
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: 'sats', values?: undefined): string;
  encodeFunctionData(functionFragment: 'setSystem', values: [string]): string;
  encodeFunctionData(
    functionFragment: 'swapAsset',
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: 'symbol', values?: undefined): string;
  encodeFunctionData(functionFragment: 'system', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'totalSupply',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'transfer',
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'transferFrom',
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'transferOwnership',
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: 'updateEarlyExitFeeBps',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'updateLiquidation',
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: 'updateMinNodeCollateral',
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: 'MIN_NODE_PERIOD',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'addAsset', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'addConfiscation',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'addNode', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'addOverissue',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'allowance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'approve', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'balanceOf', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'btcRater', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'confiscate', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'confiscations',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'decimals', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'decreaseAllowance',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'decrementRefCount',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'deleteNode',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'earlyExitFeeBps',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getCollateralWei',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'getNode', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'importNodes',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'increaseAllowance',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'incrementRefCount',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'isNodeQualified',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'nodeData', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'liquidation',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'minNodeCollateral',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'name', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'offsetOverissue',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'overissuedTotal',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'punishNode',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'renounceOwnership',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'sats', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setSystem', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'swapAsset', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'symbol', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'system', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'totalSupply',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'transfer', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'transferFrom',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'transferOwnership',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'updateEarlyExitFeeBps',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'updateLiquidation',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'updateMinNodeCollateral',
    data: BytesLike
  ): Result;

  events: {
    'Approval(address,address,uint256)': EventFragment;
    'AssetAdded(address)': EventFragment;
    'Confiscated(address,address,uint256)': EventFragment;
    'ConfiscationAdded(address,uint256)': EventFragment;
    'EarlyExitFeeBpsUpdated(uint8)': EventFragment;
    'NodeAdded(address,address,uint256)': EventFragment;
    'NodeAssetSwapped(address,address,uint256)': EventFragment;
    'NodeDeleted(address,address,uint256,uint256)': EventFragment;
    'NodeImported(address,address,address[],uint256)': EventFragment;
    'NodePunished(address,address,uint256)': EventFragment;
    'NodeRefCount(address,uint256)': EventFragment;
    'LiquidationUpdated(address,address)': EventFragment;
    'MinCollateralUpdated(uint256)': EventFragment;
    'OffsetOverissued(address,uint256,uint256)': EventFragment;
    'OverissueAdded(uint256,uint256,uint256)': EventFragment;
    'OwnershipTransferred(address,address)': EventFragment;
    'SystemUpdated(address,address)': EventFragment;
    'Transfer(address,address,uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'Approval'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'AssetAdded'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Confiscated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ConfiscationAdded'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'EarlyExitFeeBpsUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'NodeAdded'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'NodeAssetSwapped'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'NodeDeleted'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'NodeImported'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'NodePunished'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'NodeRefCount'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'LiquidationUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'MinCollateralUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OffsetOverissued'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OverissueAdded'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SystemUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Transfer'): EventFragment;
}

export class NodeRegistry extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: NodeRegistryInterface;

  functions: {
    MIN_NODE_PERIOD(overrides?: CallOverrides): Promise<[number]>;

    'MIN_NODE_PERIOD()'(overrides?: CallOverrides): Promise<[number]>;

    addAsset(
      asset: string,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;

    'addAsset(address)'(
      asset: string,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;

    addConfiscation(
      sender: string,
      asset: string,
      amount: BigNumberish,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;

    'addConfiscation(address,address,uint256)'(
      sender: string,
      asset: string,
      amount: BigNumberish,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;

    addNode(
      asset: string,
      amount: BigNumberish,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;

    'addNode(address,uint256)'(
      asset: string,
      amount: BigNumberish,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;

    addOverissue(
      overissuedAmount: BigNumberish,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;

    'addOverissue(uint256)'(
      overissuedAmount: BigNumberish,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    'allowance(address,address)'(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;

    'approve(address,uint256)'(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    'balanceOf(address)'(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    btcRater(overrides?: CallOverrides): Promise<[string]>;

    'btcRater()'(overrides?: CallOverrides): Promise<[string]>;

    confiscate(
      assets: string[],
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;

    'confiscate(address[])'(
      assets: string[],
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;

    confiscations(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    'confiscations(address)'(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    'decimals()'(overrides?: CallOverrides): Promise<[number]>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;

    'decreaseAllowance(address,uint256)'(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;

    decrementRefCount(
      node: string,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;

    'decrementRefCount(address)'(
      node: string,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;

    deleteNode(
      cAmount: BigNumberish,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;

    'deleteNode(uint256)'(
      cAmount: BigNumberish,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;

    earlyExitFeeBps(overrides?: CallOverrides): Promise<[number]>;

    'earlyExitFeeBps()'(overrides?: CallOverrides): Promise<[number]>;

    getCollateralWei(
      node: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    'getCollateralWei(address)'(
      node: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getNode(
      node: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, string, number, number] & {
          amount: BigNumber;
          asset: string;
          refCount: number;
          joinTimestamp: number;
        }
      ]
    >;

    'getNode(address)'(
      node: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, string, number, number] & {
          amount: BigNumber;
          asset: string;
          refCount: number;
          joinTimestamp: number;
        }
      ]
    >;

    importNodes(
      amount: BigNumberish,
      asset: string,
      nodes: string[],
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;

    'importNodes(uint256,address,address[])'(
      amount: BigNumberish,
      asset: string,
      nodes: string[],
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;

    'increaseAllowance(address,uint256)'(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;

    incrementRefCount(
      node: string,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;

    'incrementRefCount(address)'(
      node: string,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;

    isNodeQualified(
      node: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    'isNodeQualified(address)'(
      node: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    nodeData(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, number, number] & {
        amount: BigNumber;
        asset: string;
        refCount: number;
        joinTimestamp: number;
      }
    >;

    'nodeData(address)'(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, number, number] & {
        amount: BigNumber;
        asset: string;
        refCount: number;
        joinTimestamp: number;
      }
    >;

    liquidation(overrides?: CallOverrides): Promise<[string]>;

    'liquidation()'(overrides?: CallOverrides): Promise<[string]>;

    minNodeCollateral(overrides?: CallOverrides): Promise<[BigNumber]>;

    'minNodeCollateral()'(overrides?: CallOverrides): Promise<[BigNumber]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    'name()'(overrides?: CallOverrides): Promise<[string]>;

    offsetOverissue(
      satsAmount: BigNumberish,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;

    'offsetOverissue(uint256)'(
      satsAmount: BigNumberish,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;

    overissuedTotal(overrides?: CallOverrides): Promise<[BigNumber]>;

    'overissuedTotal()'(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    'owner()'(overrides?: CallOverrides): Promise<[string]>;

    punishNode(
      nodes: string[],
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;

    'punishNode(address[])'(
      nodes: string[],
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;

    'renounceOwnership()'(
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;

    sats(overrides?: CallOverrides): Promise<[string]>;

    'sats()'(overrides?: CallOverrides): Promise<[string]>;

    setSystem(
      _system: string,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;

    'setSystem(address)'(
      _system: string,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;

    swapAsset(
      asset: string,
      amount: BigNumberish,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;

    'swapAsset(address,uint256)'(
      asset: string,
      amount: BigNumberish,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    'symbol()'(overrides?: CallOverrides): Promise<[string]>;

    system(overrides?: CallOverrides): Promise<[string]>;

    'system()'(overrides?: CallOverrides): Promise<[string]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    'totalSupply()'(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;

    'transfer(address,uint256)'(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;

    'transferFrom(address,address,uint256)'(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;

    'transferOwnership(address)'(
      newOwner: string,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;

    updateEarlyExitFeeBps(
      bps: BigNumberish,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;

    'updateEarlyExitFeeBps(uint8)'(
      bps: BigNumberish,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;

    updateLiquidation(
      newLiquidation: string,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;

    'updateLiquidation(address)'(
      newLiquidation: string,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;

    updateMinNodeCollateral(
      amount: BigNumberish,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;

    'updateMinNodeCollateral(uint256)'(
      amount: BigNumberish,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;
  };

  MIN_NODE_PERIOD(overrides?: CallOverrides): Promise<number>;

  'MIN_NODE_PERIOD()'(overrides?: CallOverrides): Promise<number>;

  addAsset(
    asset: string,
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  'addAsset(address)'(
    asset: string,
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  addConfiscation(
    sender: string,
    asset: string,
    amount: BigNumberish,
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  'addConfiscation(address,address,uint256)'(
    sender: string,
    asset: string,
    amount: BigNumberish,
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  addNode(
    asset: string,
    amount: BigNumberish,
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  'addNode(address,uint256)'(
    asset: string,
    amount: BigNumberish,
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  addOverissue(
    overissuedAmount: BigNumberish,
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  'addOverissue(uint256)'(
    overissuedAmount: BigNumberish,
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  allowance(
    owner: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  'allowance(address,address)'(
    owner: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  'approve(address,uint256)'(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  'balanceOf(address)'(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  btcRater(overrides?: CallOverrides): Promise<string>;

  'btcRater()'(overrides?: CallOverrides): Promise<string>;

  confiscate(
    assets: string[],
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  'confiscate(address[])'(
    assets: string[],
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  confiscations(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  'confiscations(address)'(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  decimals(overrides?: CallOverrides): Promise<number>;

  'decimals()'(overrides?: CallOverrides): Promise<number>;

  decreaseAllowance(
    spender: string,
    subtractedValue: BigNumberish,
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  'decreaseAllowance(address,uint256)'(
    spender: string,
    subtractedValue: BigNumberish,
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  decrementRefCount(
    node: string,
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  'decrementRefCount(address)'(
    node: string,
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  deleteNode(
    cAmount: BigNumberish,
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  'deleteNode(uint256)'(
    cAmount: BigNumberish,
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  earlyExitFeeBps(overrides?: CallOverrides): Promise<number>;

  'earlyExitFeeBps()'(overrides?: CallOverrides): Promise<number>;

  getCollateralWei(
    node: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  'getCollateralWei(address)'(
    node: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getNode(
    node: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string, number, number] & {
      amount: BigNumber;
      asset: string;
      refCount: number;
      joinTimestamp: number;
    }
  >;

  'getNode(address)'(
    node: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string, number, number] & {
      amount: BigNumber;
      asset: string;
      refCount: number;
      joinTimestamp: number;
    }
  >;

  importNodes(
    amount: BigNumberish,
    asset: string,
    nodes: string[],
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  'importNodes(uint256,address,address[])'(
    amount: BigNumberish,
    asset: string,
    nodes: string[],
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  increaseAllowance(
    spender: string,
    addedValue: BigNumberish,
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  'increaseAllowance(address,uint256)'(
    spender: string,
    addedValue: BigNumberish,
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  incrementRefCount(
    node: string,
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  'incrementRefCount(address)'(
    node: string,
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  isNodeQualified(
    node: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  'isNodeQualified(address)'(
    node: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  nodeData(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string, number, number] & {
      amount: BigNumber;
      asset: string;
      refCount: number;
      joinTimestamp: number;
    }
  >;

  'nodeData(address)'(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string, number, number] & {
      amount: BigNumber;
      asset: string;
      refCount: number;
      joinTimestamp: number;
    }
  >;

  liquidation(overrides?: CallOverrides): Promise<string>;

  'liquidation()'(overrides?: CallOverrides): Promise<string>;

  minNodeCollateral(overrides?: CallOverrides): Promise<BigNumber>;

  'minNodeCollateral()'(overrides?: CallOverrides): Promise<BigNumber>;

  name(overrides?: CallOverrides): Promise<string>;

  'name()'(overrides?: CallOverrides): Promise<string>;

  offsetOverissue(
    satsAmount: BigNumberish,
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  'offsetOverissue(uint256)'(
    satsAmount: BigNumberish,
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  overissuedTotal(overrides?: CallOverrides): Promise<BigNumber>;

  'overissuedTotal()'(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  'owner()'(overrides?: CallOverrides): Promise<string>;

  punishNode(
    nodes: string[],
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  'punishNode(address[])'(
    nodes: string[],
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  'renounceOwnership()'(
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  sats(overrides?: CallOverrides): Promise<string>;

  'sats()'(overrides?: CallOverrides): Promise<string>;

  setSystem(
    _system: string,
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  'setSystem(address)'(
    _system: string,
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  swapAsset(
    asset: string,
    amount: BigNumberish,
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  'swapAsset(address,uint256)'(
    asset: string,
    amount: BigNumberish,
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  symbol(overrides?: CallOverrides): Promise<string>;

  'symbol()'(overrides?: CallOverrides): Promise<string>;

  system(overrides?: CallOverrides): Promise<string>;

  'system()'(overrides?: CallOverrides): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  'totalSupply()'(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  'transfer(address,uint256)'(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  transferFrom(
    sender: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  'transferFrom(address,address,uint256)'(
    sender: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  'transferOwnership(address)'(
    newOwner: string,
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  updateEarlyExitFeeBps(
    bps: BigNumberish,
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  'updateEarlyExitFeeBps(uint8)'(
    bps: BigNumberish,
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  updateLiquidation(
    newLiquidation: string,
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  'updateLiquidation(address)'(
    newLiquidation: string,
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  updateMinNodeCollateral(
    amount: BigNumberish,
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  'updateMinNodeCollateral(uint256)'(
    amount: BigNumberish,
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  callStatic: {
    MIN_NODE_PERIOD(overrides?: CallOverrides): Promise<number>;

    'MIN_NODE_PERIOD()'(overrides?: CallOverrides): Promise<number>;

    addAsset(asset: string, overrides?: CallOverrides): Promise<void>;

    'addAsset(address)'(
      asset: string,
      overrides?: CallOverrides
    ): Promise<void>;

    addConfiscation(
      sender: string,
      asset: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    'addConfiscation(address,address,uint256)'(
      sender: string,
      asset: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    addNode(
      asset: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    'addNode(address,uint256)'(
      asset: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    addOverissue(
      overissuedAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    'addOverissue(uint256)'(
      overissuedAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    'allowance(address,address)'(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    'approve(address,uint256)'(
      spender: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    'balanceOf(address)'(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    btcRater(overrides?: CallOverrides): Promise<string>;

    'btcRater()'(overrides?: CallOverrides): Promise<string>;

    confiscate(assets: string[], overrides?: CallOverrides): Promise<void>;

    'confiscate(address[])'(
      assets: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    confiscations(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    'confiscations(address)'(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<number>;

    'decimals()'(overrides?: CallOverrides): Promise<number>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    'decreaseAllowance(address,uint256)'(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    decrementRefCount(node: string, overrides?: CallOverrides): Promise<void>;

    'decrementRefCount(address)'(
      node: string,
      overrides?: CallOverrides
    ): Promise<void>;

    deleteNode(
      cAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    'deleteNode(uint256)'(
      cAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    earlyExitFeeBps(overrides?: CallOverrides): Promise<number>;

    'earlyExitFeeBps()'(overrides?: CallOverrides): Promise<number>;

    getCollateralWei(
      node: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    'getCollateralWei(address)'(
      node: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNode(
      node: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, number, number] & {
        amount: BigNumber;
        asset: string;
        refCount: number;
        joinTimestamp: number;
      }
    >;

    'getNode(address)'(
      node: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, number, number] & {
        amount: BigNumber;
        asset: string;
        refCount: number;
        joinTimestamp: number;
      }
    >;

    importNodes(
      amount: BigNumberish,
      asset: string,
      nodes: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    'importNodes(uint256,address,address[])'(
      amount: BigNumberish,
      asset: string,
      nodes: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    'increaseAllowance(address,uint256)'(
      spender: string,
      addedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    incrementRefCount(node: string, overrides?: CallOverrides): Promise<void>;

    'incrementRefCount(address)'(
      node: string,
      overrides?: CallOverrides
    ): Promise<void>;

    isNodeQualified(
      node: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    'isNodeQualified(address)'(
      node: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    nodeData(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, number, number] & {
        amount: BigNumber;
        asset: string;
        refCount: number;
        joinTimestamp: number;
      }
    >;

    'nodeData(address)'(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, number, number] & {
        amount: BigNumber;
        asset: string;
        refCount: number;
        joinTimestamp: number;
      }
    >;

    liquidation(overrides?: CallOverrides): Promise<string>;

    'liquidation()'(overrides?: CallOverrides): Promise<string>;

    minNodeCollateral(overrides?: CallOverrides): Promise<BigNumber>;

    'minNodeCollateral()'(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<string>;

    'name()'(overrides?: CallOverrides): Promise<string>;

    offsetOverissue(
      satsAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    'offsetOverissue(uint256)'(
      satsAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    overissuedTotal(overrides?: CallOverrides): Promise<BigNumber>;

    'overissuedTotal()'(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    'owner()'(overrides?: CallOverrides): Promise<string>;

    punishNode(nodes: string[], overrides?: CallOverrides): Promise<void>;

    'punishNode(address[])'(
      nodes: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    'renounceOwnership()'(overrides?: CallOverrides): Promise<void>;

    sats(overrides?: CallOverrides): Promise<string>;

    'sats()'(overrides?: CallOverrides): Promise<string>;

    setSystem(_system: string, overrides?: CallOverrides): Promise<void>;

    'setSystem(address)'(
      _system: string,
      overrides?: CallOverrides
    ): Promise<void>;

    swapAsset(
      asset: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    'swapAsset(address,uint256)'(
      asset: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    symbol(overrides?: CallOverrides): Promise<string>;

    'symbol()'(overrides?: CallOverrides): Promise<string>;

    system(overrides?: CallOverrides): Promise<string>;

    'system()'(overrides?: CallOverrides): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    'totalSupply()'(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    'transfer(address,uint256)'(
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    'transferFrom(address,address,uint256)'(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    'transferOwnership(address)'(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateEarlyExitFeeBps(
      bps: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    'updateEarlyExitFeeBps(uint8)'(
      bps: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateLiquidation(
      newLiquidation: string,
      overrides?: CallOverrides
    ): Promise<void>;

    'updateLiquidation(address)'(
      newLiquidation: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateMinNodeCollateral(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    'updateMinNodeCollateral(uint256)'(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    Approval(
      owner: string | null,
      spender: string | null,
      value: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      {owner: string; spender: string; value: BigNumber}
    >;

    AssetAdded(
      asset: string | null
    ): TypedEventFilter<[string], {asset: string}>;

    Confiscated(
      liquidation: string | null,
      asset: null,
      amount: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      {liquidation: string; asset: string; amount: BigNumber}
    >;

    ConfiscationAdded(
      asset: null,
      amount: null
    ): TypedEventFilter<
      [string, BigNumber],
      {asset: string; amount: BigNumber}
    >;

    EarlyExitFeeBpsUpdated(
      bps: null
    ): TypedEventFilter<[number], {bps: number}>;

    NodeAdded(
      node: string | null,
      asset: null,
      amount: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      {node: string; asset: string; amount: BigNumber}
    >;

    NodeAssetSwapped(
      node: string | null,
      asset: null,
      amount: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      {node: string; asset: string; amount: BigNumber}
    >;

    NodeDeleted(
      node: string | null,
      asset: null,
      amount: null,
      cAmount: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber],
      {node: string; asset: string; amount: BigNumber; cAmount: BigNumber}
    >;

    NodeImported(
      from: string | null,
      asset: null,
      nodes: null,
      amount: null
    ): TypedEventFilter<
      [string, string, string[], BigNumber],
      {from: string; asset: string; nodes: string[]; amount: BigNumber}
    >;

    NodePunished(
      node: string | null,
      asset: null,
      collateral: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      {node: string; asset: string; collateral: BigNumber}
    >;

    NodeRefCount(
      node: string | null,
      count: null
    ): TypedEventFilter<
      [string, BigNumber],
      {node: string; count: BigNumber}
    >;

    LiquidationUpdated(
      previousLiquidation: string | null,
      newLiquidation: string | null
    ): TypedEventFilter<
      [string, string],
      {previousLiquidation: string; newLiquidation: string}
    >;

    MinCollateralUpdated(
      amount: null
    ): TypedEventFilter<[BigNumber], {amount: BigNumber}>;

    OffsetOverissued(
      operator: string | null,
      satsAmount: null,
      remainingOverissueAmount: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      {
        operator: string;
        satsAmount: BigNumber;
        remainingOverissueAmount: BigNumber;
      }
    >;

    OverissueAdded(
      total: null,
      added: null,
      deduction: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber],
      {total: BigNumber; added: BigNumber; deduction: BigNumber}
    >;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): TypedEventFilter<
      [string, string],
      {previousOwner: string; newOwner: string}
    >;

    SystemUpdated(
      oldSystem: null,
      newSystem: null
    ): TypedEventFilter<
      [string, string],
      {oldSystem: string; newSystem: string}
    >;

    Transfer(
      from: string | null,
      to: string | null,
      value: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      {from: string; to: string; value: BigNumber}
    >;
  };

  estimateGas: {
    MIN_NODE_PERIOD(overrides?: CallOverrides): Promise<BigNumber>;

    'MIN_NODE_PERIOD()'(overrides?: CallOverrides): Promise<BigNumber>;

    addAsset(
      asset: string,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;

    'addAsset(address)'(
      asset: string,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;

    addConfiscation(
      sender: string,
      asset: string,
      amount: BigNumberish,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;

    'addConfiscation(address,address,uint256)'(
      sender: string,
      asset: string,
      amount: BigNumberish,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;

    addNode(
      asset: string,
      amount: BigNumberish,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;

    'addNode(address,uint256)'(
      asset: string,
      amount: BigNumberish,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;

    addOverissue(
      overissuedAmount: BigNumberish,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;

    'addOverissue(uint256)'(
      overissuedAmount: BigNumberish,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    'allowance(address,address)'(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;

    'approve(address,uint256)'(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    'balanceOf(address)'(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    btcRater(overrides?: CallOverrides): Promise<BigNumber>;

    'btcRater()'(overrides?: CallOverrides): Promise<BigNumber>;

    confiscate(
      assets: string[],
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;

    'confiscate(address[])'(
      assets: string[],
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;

    confiscations(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    'confiscations(address)'(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    'decimals()'(overrides?: CallOverrides): Promise<BigNumber>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;

    'decreaseAllowance(address,uint256)'(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;

    decrementRefCount(
      node: string,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;

    'decrementRefCount(address)'(
      node: string,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;

    deleteNode(
      cAmount: BigNumberish,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;

    'deleteNode(uint256)'(
      cAmount: BigNumberish,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;

    earlyExitFeeBps(overrides?: CallOverrides): Promise<BigNumber>;

    'earlyExitFeeBps()'(overrides?: CallOverrides): Promise<BigNumber>;

    getCollateralWei(
      node: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    'getCollateralWei(address)'(
      node: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNode(node: string, overrides?: CallOverrides): Promise<BigNumber>;

    'getNode(address)'(
      node: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    importNodes(
      amount: BigNumberish,
      asset: string,
      nodes: string[],
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;

    'importNodes(uint256,address,address[])'(
      amount: BigNumberish,
      asset: string,
      nodes: string[],
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;

    'increaseAllowance(address,uint256)'(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;

    incrementRefCount(
      node: string,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;

    'incrementRefCount(address)'(
      node: string,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;

    isNodeQualified(
      node: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    'isNodeQualified(address)'(
      node: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nodeData(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    'nodeData(address)'(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    liquidation(overrides?: CallOverrides): Promise<BigNumber>;

    'liquidation()'(overrides?: CallOverrides): Promise<BigNumber>;

    minNodeCollateral(overrides?: CallOverrides): Promise<BigNumber>;

    'minNodeCollateral()'(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    'name()'(overrides?: CallOverrides): Promise<BigNumber>;

    offsetOverissue(
      satsAmount: BigNumberish,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;

    'offsetOverissue(uint256)'(
      satsAmount: BigNumberish,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;

    overissuedTotal(overrides?: CallOverrides): Promise<BigNumber>;

    'overissuedTotal()'(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    'owner()'(overrides?: CallOverrides): Promise<BigNumber>;

    punishNode(
      nodes: string[],
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;

    'punishNode(address[])'(
      nodes: string[],
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;

    'renounceOwnership()'(
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;

    sats(overrides?: CallOverrides): Promise<BigNumber>;

    'sats()'(overrides?: CallOverrides): Promise<BigNumber>;

    setSystem(
      _system: string,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;

    'setSystem(address)'(
      _system: string,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;

    swapAsset(
      asset: string,
      amount: BigNumberish,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;

    'swapAsset(address,uint256)'(
      asset: string,
      amount: BigNumberish,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    'symbol()'(overrides?: CallOverrides): Promise<BigNumber>;

    system(overrides?: CallOverrides): Promise<BigNumber>;

    'system()'(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    'totalSupply()'(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;

    'transfer(address,uint256)'(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;

    'transferFrom(address,address,uint256)'(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;

    'transferOwnership(address)'(
      newOwner: string,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;

    updateEarlyExitFeeBps(
      bps: BigNumberish,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;

    'updateEarlyExitFeeBps(uint8)'(
      bps: BigNumberish,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;

    updateLiquidation(
      newLiquidation: string,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;

    'updateLiquidation(address)'(
      newLiquidation: string,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;

    updateMinNodeCollateral(
      amount: BigNumberish,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;

    'updateMinNodeCollateral(uint256)'(
      amount: BigNumberish,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    MIN_NODE_PERIOD(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'MIN_NODE_PERIOD()'(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addAsset(
      asset: string,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;

    'addAsset(address)'(
      asset: string,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;

    addConfiscation(
      sender: string,
      asset: string,
      amount: BigNumberish,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;

    'addConfiscation(address,address,uint256)'(
      sender: string,
      asset: string,
      amount: BigNumberish,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;

    addNode(
      asset: string,
      amount: BigNumberish,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;

    'addNode(address,uint256)'(
      asset: string,
      amount: BigNumberish,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;

    addOverissue(
      overissuedAmount: BigNumberish,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;

    'addOverissue(uint256)'(
      overissuedAmount: BigNumberish,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    'allowance(address,address)'(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;

    'approve(address,uint256)'(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;

    balanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    'balanceOf(address)'(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    btcRater(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'btcRater()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    confiscate(
      assets: string[],
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;

    'confiscate(address[])'(
      assets: string[],
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;

    confiscations(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    'confiscations(address)'(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'decimals()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;

    'decreaseAllowance(address,uint256)'(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;

    decrementRefCount(
      node: string,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;

    'decrementRefCount(address)'(
      node: string,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;

    deleteNode(
      cAmount: BigNumberish,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;

    'deleteNode(uint256)'(
      cAmount: BigNumberish,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;

    earlyExitFeeBps(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'earlyExitFeeBps()'(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCollateralWei(
      node: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    'getCollateralWei(address)'(
      node: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNode(
      node: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    'getNode(address)'(
      node: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    importNodes(
      amount: BigNumberish,
      asset: string,
      nodes: string[],
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;

    'importNodes(uint256,address,address[])'(
      amount: BigNumberish,
      asset: string,
      nodes: string[],
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;

    'increaseAllowance(address,uint256)'(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;

    incrementRefCount(
      node: string,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;

    'incrementRefCount(address)'(
      node: string,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;

    isNodeQualified(
      node: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    'isNodeQualified(address)'(
      node: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nodeData(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    'nodeData(address)'(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    liquidation(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'liquidation()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minNodeCollateral(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    'minNodeCollateral()'(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'name()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    offsetOverissue(
      satsAmount: BigNumberish,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;

    'offsetOverissue(uint256)'(
      satsAmount: BigNumberish,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;

    overissuedTotal(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'overissuedTotal()'(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'owner()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    punishNode(
      nodes: string[],
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;

    'punishNode(address[])'(
      nodes: string[],
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;

    'renounceOwnership()'(
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;

    sats(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'sats()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setSystem(
      _system: string,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;

    'setSystem(address)'(
      _system: string,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;

    swapAsset(
      asset: string,
      amount: BigNumberish,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;

    'swapAsset(address,uint256)'(
      asset: string,
      amount: BigNumberish,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'symbol()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    system(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'system()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'totalSupply()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;

    'transfer(address,uint256)'(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;

    'transferFrom(address,address,uint256)'(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;

    'transferOwnership(address)'(
      newOwner: string,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;

    updateEarlyExitFeeBps(
      bps: BigNumberish,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;

    'updateEarlyExitFeeBps(uint8)'(
      bps: BigNumberish,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;

    updateLiquidation(
      newLiquidation: string,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;

    'updateLiquidation(address)'(
      newLiquidation: string,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;

    updateMinNodeCollateral(
      amount: BigNumberish,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;

    'updateMinNodeCollateral(uint256)'(
      amount: BigNumberish,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;
  };
}
